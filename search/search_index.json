{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to the NAISS Intro to Python course","text":"<p>Great course. Now, Python is not scary anymore.</p> <p>A learner from this course (source)</p> <p>This course introduces the foundations of the Python programming language.</p> <p>Prerequisites Course dates Schedule Getting it to run Basic Python</p>"},{"location":"CODE_OF_CONDUCT/","title":"Contributor Covenant Code of Conduct","text":""},{"location":"CODE_OF_CONDUCT/#our-pledge","title":"Our Pledge","text":"<p>We as members, contributors, and leaders pledge to make participation in our community a harassment-free experience for everyone, regardless of age, body size, visible or invisible disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, or sexual identity and orientation.</p> <p>We pledge to act and interact in ways that contribute to an open, welcoming, diverse, inclusive, and healthy community.</p>"},{"location":"CODE_OF_CONDUCT/#our-standards","title":"Our Standards","text":"<p>Examples of behavior that contributes to a positive environment for our community include:</p> <ul> <li>Demonstrating empathy and kindness toward other people</li> <li>Being respectful of differing opinions, viewpoints, and experiences</li> <li>Giving and gracefully accepting constructive feedback</li> <li>Accepting responsibility and apologizing to those affected by our mistakes,   and learning from the experience</li> <li>Focusing on what is best not just for us as individuals, but for the   overall community</li> </ul> <p>Examples of unacceptable behavior include:</p> <ul> <li>The use of sexualized language or imagery, and sexual attention or   advances of any kind</li> <li>Trolling, insulting or derogatory comments, and personal or political attacks</li> <li>Public or private harassment</li> <li>Publishing others' private information, such as a physical or email   address, without their explicit permission</li> <li>Other conduct which could reasonably be considered inappropriate in a   professional setting</li> </ul>"},{"location":"CODE_OF_CONDUCT/#enforcement-responsibilities","title":"Enforcement Responsibilities","text":"<p>Community leaders are responsible for clarifying and enforcing our standards of acceptable behavior and will take appropriate and fair corrective action in response to any behavior that they deem inappropriate, threatening, offensive, or harmful.</p> <p>Community leaders have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, and will communicate reasons for moderation decisions when appropriate.</p>"},{"location":"CODE_OF_CONDUCT/#scope","title":"Scope","text":"<p>This Code of Conduct applies within all community spaces, and also applies when an individual is officially representing the community in public spaces. Examples of representing our community include using an official e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event.</p>"},{"location":"CODE_OF_CONDUCT/#enforcement","title":"Enforcement","text":"<p>Instances of abusive, harassing, or otherwise unacceptable behavior may be reported to the community leaders responsible for enforcement at marcus.lundberg@uppmax.uu.se. All complaints will be reviewed and investigated promptly and fairly.</p> <p>All community leaders are obligated to respect the privacy and security of the reporter of any incident.</p>"},{"location":"CODE_OF_CONDUCT/#enforcement-guidelines","title":"Enforcement Guidelines","text":"<p>Community leaders will follow these Community Impact Guidelines in determining the consequences for any action they deem in violation of this Code of Conduct:</p>"},{"location":"CODE_OF_CONDUCT/#1-correction","title":"1. Correction","text":"<p>Community Impact: Use of inappropriate language or other behavior deemed unprofessional or unwelcome in the community.</p> <p>Consequence: A private, written warning from community leaders, providing clarity around the nature of the violation and an explanation of why the behavior was inappropriate. A public apology may be requested.</p>"},{"location":"CODE_OF_CONDUCT/#2-warning","title":"2. Warning","text":"<p>Community Impact: A violation through a single incident or series of actions.</p> <p>Consequence: A warning with consequences for continued behavior. No interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, for a specified period of time. This includes avoiding interactions in community spaces as well as external channels like social media. Violating these terms may lead to a temporary or permanent ban.</p>"},{"location":"CODE_OF_CONDUCT/#3-temporary-ban","title":"3. Temporary Ban","text":"<p>Community Impact: A serious violation of community standards, including sustained inappropriate behavior.</p> <p>Consequence: A temporary ban from any sort of interaction or public communication with the community for a specified period of time. No public or private interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, is allowed during this period. Violating these terms may lead to a permanent ban.</p>"},{"location":"CODE_OF_CONDUCT/#4-permanent-ban","title":"4. Permanent Ban","text":"<p>Community Impact: Demonstrating a pattern of violation of community standards, including sustained inappropriate behavior,  harassment of an individual, or aggression toward or disparagement of classes of individuals.</p> <p>Consequence: A permanent ban from any sort of public interaction within the community.</p>"},{"location":"CODE_OF_CONDUCT/#attribution","title":"Attribution","text":"<p>This Code of Conduct is adapted from the Contributor Covenant, version 2.0, available at https://www.contributor-covenant.org/version/2/0/code_of_conduct.html.</p> <p>Community Impact Guidelines were inspired by Mozilla's code of conduct enforcement ladder.</p> <p>For answers to common questions about this code of conduct, see the FAQ at https://www.contributor-covenant.org/faq. Translations are available at https://www.contributor-covenant.org/translations.</p>"},{"location":"CONTRIBUTING/","title":"Contributing","text":"<p>Thanks for considering to contribute and reading this!</p> <p>Here we discuss how to contribute</p> <ul> <li>Spoken text, e.g. ideas, feedback, messages, etc.   and are written in English.</li> <li>Code, e.g. textual changes where the text is formatted in Markdown</li> </ul>"},{"location":"CONTRIBUTING/#spoken-text","title":"Spoken text","text":"<p>Spoken text are ideas, feedback, messages, etc. and are written in English.</p> <p>For ideas or feedback, create an Issue. These Issues will be discussed in a meeting and/or below that Issue.</p> <p>Ideas that improve the experience of our learners will likely be accepted.</p>"},{"location":"CONTRIBUTING/#code","title":"Code","text":"<p>We welcome any contribution that:</p> <ul> <li>improves the experience of our learners</li> <li>follow all standards set by the continuous integration tools   (e.g. use 4 spaces for indentation)</li> </ul> <p>As an UPPMAX contributor, one can contribute by:</p> <ol> <li>Clone this repository</li> <li>Add a branch</li> <li>Work on your branch</li> <li>When done, create a Pull Request from your branch to <code>main</code></li> <li>If the change is accepted after review it will be merged into the main branch</li> <li>Your branch will be deleted after merging</li> </ol> <p>As an external contributor, one can contribute by:</p> <ol> <li>Fork this repository</li> <li>Modify your Fork</li> <li>When done, creating a Pull Request from your Fork to this repository,    merging to the <code>main</code> branch is fine :-)</li> <li>If the change is accepted after review it will be merged into the main branch</li> </ol>"},{"location":"acknowledgements/","title":"Acknowledgements","text":"<p>These are people that helped make this site better, in alphabetic order of first name:</p> <ul> <li>Aleksandra Krusper</li> <li>Elin Berntsson</li> </ul>"},{"location":"contact_us/","title":"Contact us","text":"<p>Sometimes there is a question missing at the Frequently Asked Questions section, sometimes there are other things.</p> <p>You can contact us:</p> Contact method Features Create an issue Best for asking a question publicly, requires a GitHub account Create a pull request Best for improving the course content, requires a GitHub account Send an email Best for asking a question privately, invisible to others <p>When sending an email, these are the roles:</p> Role Person Course coordinator Diana Iusan Main teacher Rich\u00e8l Bilderbeek","tags":["contact","email","talk","find","speak","meet"]},{"location":"course_dates/","title":"Course dates","text":"Where is the schedule? <p>It is at Schedule :-)</p> For teachers <ul> <li>Shared document for teaching dates</li> </ul> Week Date Times Registration closes Remarks 10 Tuesday March 4th 2025 9:00-16:00 2025-03-03 . 17 Thursday April 24th 2025 9:00-16:00 ? As part of the 4-day NAISS HPC Python course 42 Tuesday October 14th 2025 9:00-16:00 2025-10-09 .","tags":["dates","days","calendar"]},{"location":"deploy_locally/","title":"Deploy this repository as a local website","text":"<p>This page describes how to deploy this website locally.</p> <p>To work on the website locally first create a virtual environment and install the required dependencies:</p> Do I really need a virtual environment? <p>No.</p> <pre><code>python -m venv intro_python_venv\nsource intro_python_venv/bin/activate\npip install -r requirements.txt\n</code></pre> <p>Then serve the website and edit</p> <pre><code>mkdocs serve\n</code></pre>"},{"location":"evaluation/","title":"Evaluation","text":"<p>This is the page for evaluating the current iteration of the course.</p> Where can I find the results of earlier evaluations? <p>At the 'Evaluations' page.</p>","tags":["evaluation"]},{"location":"evaluation/#evaluation-forms","title":"Evaluation forms","text":"<ul> <li>Any feedback during the day: here</li> </ul> For teachers: what is in that form? <p>Thanks for your feedback. This feedback will be published as-is at the end of the day, if and only if there are no personal details (email, address, etc.) in the feedback. Do mention the teachers, assistants, etc by name!</p> <ul> <li>Evaluation questions: here</li> </ul> For teachers: what is in that form? <p>These are the evaluation questions. The goals of these questions is to find out how successful the course is in achieving its teaching goals.</p> <p>Give you confidence levels of the following statements, using this scale:</p> <ul> <li>0: I don't know even what this is about ...?</li> <li>1: I have no confidence I can do this</li> <li>2: I have low confidence I can do this</li> <li>3: I have some confidence I can do this</li> <li>4: I have good confidence I can do this</li> <li>5: I absolutely can do this!</li> </ul> <p>Give you confidence levels of the following statements below:</p> <ul> <li>I am comfortable using the documentation of my HPC center</li> <li>I am comfortable using the Python book</li> <li>I am comfortable learning Python</li> <li>I can login to my HPC cluster</li> <li>I can load a Python version on my HPC cluster</li> <li>I can describe what the Python programming language is</li> <li>I can describe what the Python interpreter is</li> <li>I can use a text editor on my HPC cluster</li> <li>I can create a Python script</li> <li>I can run a Python script</li> <li>In Python, I can create a variable</li> <li>In Python, I can use a variable</li> <li>I can convert a simple equation to Python code</li> <li>In Python, I can find and use the operator for exponentiation</li> <li>In Python, I know what the modulo operator is and when to use it</li> <li>I can convert a simple text question to Python code</li> <li>In Python, I can ask a user for input</li> <li>In Python, I can use user input in a calculation</li> <li>I can find and use a Python module on my HPC cluster</li> <li>In Python, I can read a file</li> <li>In Python, I can create a file</li> <li>In Python, I can use command-line arguments</li> <li>In Python, I can import the <code>matplotlib</code> library</li> <li>In Python, I can use a for loop</li> <li>In Python,   I can write a function without an argument and without a return type</li> <li>In Python, I can write a function that calls a function</li> <li>In Python, I can write a function that requires an argument</li> <li>In Python, I can write a function with a return value</li> </ul> <p>Any other feedback?</p> <pre><code>[Empty paragraph]\n</code></pre> <p>Thanks for your feedback. This feedback will be published as-is at the end of the day, if and only if there are no personal details (email, address, etc.) in the feedback. Do mention the teachers, assistants, etc by name!</p>","tags":["evaluation"]},{"location":"faq/","title":"Frequently Asked Questions","text":"","tags":["FAQ","frequently asked questions","questions"]},{"location":"faq/#when-to-follow-the-course","title":"When to follow the course","text":"","tags":["FAQ","frequently asked questions","questions"]},{"location":"faq/#when-should-i-follow-this-course","title":"When should I follow this course?","text":"<p>Tip</p> <p>Great course. Now, Python is not scary anymore.</p> <p>A learner from this course (source)</p> <p>When you want to get started with Python.</p> <p>Especially at the start of any new programming language, having help is very useful: some error messages seem like complex, yet have simple solutions. A teacher helps you get past those first errors.</p>","tags":["FAQ","frequently asked questions","questions"]},{"location":"faq/#when-should-i-consider-to-not-follow-this-course","title":"When should I consider to not follow this course?","text":"<p>These are the reasons to consider to not follow this course:</p>","tags":["FAQ","frequently asked questions","questions"]},{"location":"faq/#reason-1-you-want-to-learn-advanced-things","title":"Reason 1: you want to learn advanced things","text":"<p>Tip</p> <p>I feel like maybe some things were a little basic for me and I wish we had gotten into the more advanced stuff at the end. But this really reinforced the basics for me and I'm still glad that I did it.</p> <p>A learner from this course (source)</p> <p>When you have written your first scripts in Python and expect to learn new and more advanced things.</p> <p>In this case, the course will go too slow for you.</p> <p>However, you will probably be put to work by the teachers to help out other learners. If you like to test your own knowledge by teaching others, you will likely thrive in the course.</p>","tags":["FAQ","frequently asked questions","questions"]},{"location":"faq/#reason-2-you-have-social-anxiety","title":"Reason 2: you have social anxiety","text":"<p>When you have social anxiety.</p> <p>In this case, the course will be too social for you.</p> <p>However, in this course, it is perfectly OK to give a wrong answer or to say 'I do not know'. This is what a former learner had to say on this:</p> <p>Tip</p> <p>As a learner, you do not want to be berated when giving an answer. Richel tries to gently deal with a wrong answer and he does this great</p> <p>A learner from this course (source)</p> <p>You are welcome to try and leave anytime you want. The course material is made for self-study too, with videos for all exercises. Do fill in the evaluation when you leave early :-)</p>","tags":["FAQ","frequently asked questions","questions"]},{"location":"faq/#prerequisites","title":"Prerequisites","text":"","tags":["FAQ","frequently asked questions","questions"]},{"location":"faq/#what-are-the-prerequisites-for-following-this-course","title":"What are the prerequisites for following this course?","text":"<p>See prerequisites.</p>","tags":["FAQ","frequently asked questions","questions"]},{"location":"faq/#why-are-there-so-many-prerequisites","title":"Why are there so many prerequisites?","text":"<p>Because the newsletter was rushed :-)</p>","tags":["FAQ","frequently asked questions","questions"]},{"location":"faq/#how-can-i-check-if-i-have-registered","title":"How can I check if I have registered?","text":"Prefer a video? <p>You can see this question being answered in this YouTube video.</p> <ul> <li>Go to the course data page</li> <li>Go to the data of your course instance</li> <li>View the registrations table. If the MD5 hash of your email address   is in that table, you are registered.</li> </ul> Why use an MD5 hash? <p>As a trade-off between privacy and pragmatism.</p> <ul> <li>Privacy: do not publish email addresses, however, oneone can find out   if an email address is registered</li> <li>Pragmatism: a learner should be able to confirm he/she has been registered</li> </ul> How to use an MD5? <p>Get the MD5 hash of your email address. For example, using this website. the email <code>john.doe@gmail.com</code> gives the MD5 hash of <code>e13743a7f1db7f4246badd6fd6ff54ff</code>. If this MD5 hash is found in the table of registrations, hence, that email address is registered.</p> <p>Besides that, you should have gotten a welcome email within a couple of days.</p> <p>When it doubt, send an email to <code>richel.bilderbeek@uppmax.uu.se</code> :-)</p>","tags":["FAQ","frequently asked questions","questions"]},{"location":"faq/#how-can-i-check-if-i-have-a-user-account-on-a-swedish-academic-hpc-cluster","title":"How can I check if I have a user account on a Swedish academic HPC cluster?","text":"<p>When you can login at https://supr.naiss.se/.</p> How does that look like? <p>It should look similar to this:</p> <p></p>","tags":["FAQ","frequently asked questions","questions"]},{"location":"faq/#i-already-have-a-project-on-a-naiss-hpc-cluster-can-i-use-that-one","title":"I already have a project on a NAISS HPC cluster. Can I use that one?","text":"<p>Yes, absolutely!</p>","tags":["FAQ","frequently asked questions","questions"]},{"location":"faq/#how-can-i-get-a-user-account-on-a-swedish-academic-hpc-cluster","title":"How can I get a user account on a Swedish academic HPC cluster?","text":"<p>Register at https://supr.naiss.se/person/register/.</p>","tags":["FAQ","frequently asked questions","questions"]},{"location":"faq/#which-hpc-cluster-should-i-use","title":"Which HPC cluster should I use?","text":"<p>There are the HPC clusters that have worked-out answers to the exercises:</p> HPC cluster name Description Alvis AI focussed, uses SSH keys for authentication Bianca Sensitive data, uses passwords and two-factor authentication COSMOS General-purpose, Lund university staff only Dardel General-purpose, uses SSH keys for authentication Kebnekaise General-purpose, Ume\u00e5 university staff only Rackham General-purpose, Uppsala university staff only Tetralith General-purpose, uses passwords for authentication <p>Without any additional information, Tetralith is recommended.</p>","tags":["FAQ","frequently asked questions","questions"]},{"location":"faq/#how-can-i-check-if-i-can-login-to-an-hpc-cluster-using-ssh","title":"How can I check if I can login to an HPC cluster using SSH?","text":"<p>This depends on the HPC cluster you are using.</p> How does that look like? <p>This depends on your HPC cluster, but here is an example:</p> <p></p>","tags":["FAQ","frequently asked questions","questions"]},{"location":"faq/#how-can-i-login-to-an-hpc-cluster","title":"How can I login to an HPC cluster?","text":"<p>See the documentation of your HPC cluster.</p> <p>Also, these videos may be useful:</p> HPC cluster Login method Video Alvis SSH here Bianca Website here Bianca SSH here COSMOS SSH here Dardel SSH here Kebnekaise SSH here Kebnekaise Website here LUMI SSH None yet Rackham Local ThinLinc client here Rackham SSH here Rackham Website here Tetralith SSH here","tags":["FAQ","frequently asked questions","questions"]},{"location":"faq/#is-it-ok-if-i-can-login-to-an-hpc-cluster-using-other-methods","title":"Is it OK if I can login to an HPC cluster using other methods?","text":"<p>Probably: yes</p> <ul> <li>Using a website: yes</li> <li>Using a local ThinLinc client: yes</li> <li>Using WinSCP: yes</li> </ul>","tags":["FAQ","frequently asked questions","questions"]},{"location":"faq/#how-can-i-check-if-i-have-a-good-zoom-setup","title":"How can I check if I have a good Zoom setup?","text":"<ul> <li>You are in a room where you can talk</li> <li>You talk into a (standalone or headset) microphone</li> <li>Others can clearly hear you when you talk</li> <li>Others can see you</li> <li>You can hear others clearly when they talk</li> </ul>","tags":["FAQ","frequently asked questions","questions"]},{"location":"faq/#how-can-i-get-a-good-zoom-setup","title":"How can I get a good Zoom setup?","text":"<ul> <li>Find/schedule/book a room where you can talk</li> <li>Buy a simple headset</li> </ul>","tags":["FAQ","frequently asked questions","questions"]},{"location":"faq/#what-if-i-dont-have-a-good-zoom-setup-is-that-ok","title":"What if I don't have a good Zoom setup? Is that OK?","text":"<p>Tip</p> <p>Thank you for creating very interactive [class] room</p> <p>A learner from this course (source)</p> <p>No.</p> <p>You will feel left out, as the course in highly interactive. It would be weird to the other learners.</p>","tags":["FAQ","frequently asked questions","questions"]},{"location":"faq/#teaching","title":"Teaching","text":"","tags":["FAQ","frequently asked questions","questions"]},{"location":"faq/#why-is-the-course-learner-centered","title":"Why is the course learner-centered?","text":"<p>Tip</p> <p>I liked Ri-kjells teaching style!</p> <p>A learner from this course (source)</p> <p>Because that is good teaching.</p> <p>This course defines good teaching as 'evidence-based methods to let learners acquire new skills and the monitoring of this acquisition'. This means that it should be observed that learners need more/less to time to practice and following the schedule based on that. Learner-centered teaching has an effect size from 0.36 <code>[Hattie ranking]</code> or 0.64/0.70 <code>[Cornelius-White, 2007][Hattie, 2012]</code>.</p> <p>Or: it is useless to go faster than the learners can follow. Lecturing is known to negatively affect learning <code>[Hattie, 2023]</code>.</p> <p>The teaching methods of this course follow the evidence-based teaching cycle by <code>[Bell, 2020a]</code>, which allows learner-centered teaching.</p>","tags":["FAQ","frequently asked questions","questions"]},{"location":"faq/#website","title":"Website","text":"","tags":["FAQ","frequently asked questions","questions"]},{"location":"faq/#why-is-the-repository-owner-uppmax-instead-of-naiss","title":"Why is the repository owner <code>UPPMAX</code> instead of NAISS?","text":"<p>Because NAISS does not have a GitHub owner page yet.</p> <p>This repository will be transferred to a NAISS GitHub owner page when it exists.</p>","tags":["FAQ","frequently asked questions","questions"]},{"location":"faq/#why-is-the-repository-name-naiss_intro_python-instead-of-naiss_intro_python","title":"Why is the repository name <code>naiss_intro_python</code> instead of <code>naiss_intro_python</code>?","text":"<p>Because the first name was used in a (rushed!) newsletter.</p> <p>The name of this repository will be changed to <code>naiss_intro_python</code> after its first iteration.</p>","tags":["FAQ","frequently asked questions","questions"]},{"location":"faq/#why-dont-you-just-publish-the-zoom-room-on-the-website","title":"Why don't you just publish the Zoom room on the website?","text":"<p>As this course follow Zoom's recommended practices.</p>","tags":["FAQ","frequently asked questions","questions"]},{"location":"faq/#other","title":"Other","text":"","tags":["FAQ","frequently asked questions","questions"]},{"location":"faq/#what-if-i-have-another-question","title":"What if I have another question?","text":"<p>Preferably:</p> <ul> <li>Add an issue at https://github.com/UPPMAX/naiss_intro_python.   This requires a GitHub account and ensures your question is shown publicly   to all of the course's teaching team</li> </ul> <p>Else:</p> <ul> <li>Send an email to <code>richel.bilderbeek@uppmax.uu.se</code>.   There is no guarantee on a quick reply here.</li> </ul>","tags":["FAQ","frequently asked questions","questions"]},{"location":"faq/#references","title":"References","text":"<ul> <li><code>[Bell, 2020a]</code>   Bell, Mike. The fundamentals of teaching:   A five-step model to put the research evidence into practice. Routledge, 2020.</li> <li><code>[Cornelius-White, 2007]</code>   Cornelius-White, Jeffrey. \"Learner-centered teacher-student relationships   are effective: A meta-analysis.\" Review of educational   research 77.1 (2007): 113-143.</li> <li><code>[Hattie, 2012]</code>   Hattie, John. Visible learning for teachers:   Maximizing impact on learning. Routledge, 2012.   The effect size of student centered learning can be found on page 157,   which references <code>[Cornelius-White, 2007]</code> where an   an effect size of 0.64 or 0.7 was found   One example open access study is <code>[Knight &amp; Wood, 2005].</code></li> <li><code>[Hattie, 2023]</code>   Hattie, John. Visible learning:   The sequel: A synthesis of over 2,100 meta-analyses relating to achievement.   Routledge, 2023. The effect size of lecturing can be found on page 363,   which has an effect size of -0.26 with a robustness index of 4 out of 5   and is based on 3 meta analyses using 273 studies using 27,296 people,   measuring for 614 effects with a standard error of 0.08.   One example open access study is <code>[Knight &amp; Wood, 2005].</code></li> <li><code>[Hattie ranking]</code> The Hattie Ranking</li> <li><code>[Knight &amp; Wood, 2005]</code>   Knight, Jennifer K., and William B. Wood.   \"Teaching more by lecturing less.\" Cell biology education 4.4 (2005): 298-310.   paper</li> </ul>","tags":["FAQ","frequently asked questions","questions"]},{"location":"learning_outcomes/","title":"Learning outcomes","text":"<p>Below are the learning outcomes of this course, as copied from its evaluation. The course is learner-centered (why?), hence the pace is determined be the learners (i.e. not by the clock).</p> <p>You can be reasonably sure you'll do this:</p> <ul> <li>I am comfortable using the documentation of my HPC center</li> <li>I am comfortable using the Python book</li> <li>I am comfortable learning Python</li> <li>I can login to my HPC cluster</li> <li>I can load a Python version on my HPC cluster</li> <li>I can describe what the Python programming language is</li> <li>I can describe what the Python interpreter is</li> <li>I can use a text editor on my HPC cluster</li> <li>I can create a Python script</li> <li>I can run a Python script</li> <li>In Python, I can create a variable</li> <li>In Python, I can use a variable</li> <li>I can convert a simple equation to Python code</li> <li>In Python, I can find and use the operator for exponentiation</li> <li>In Python, I know what the modulo operator is and when to use it</li> <li>I can convert a simple text question to Python code</li> </ul> <p>Here are the rest of the learning outcomes, each item being less and less likely to be discussed:</p> <ul> <li>In Python, I can ask a user for input</li> <li>In Python, I can use user input in a calculation</li> <li>I can find and use a Python module on my HPC cluster</li> <li>In Python, I can read a file</li> <li>In Python, I can create a file</li> <li>In Python, I can use command-line arguments</li> <li>In Python, I can import the <code>matplotlib</code> library</li> <li>In Python, I can use a for loop</li> <li>In Python,   I can write a function without an argument and without a return type</li> <li>In Python, I can write a function that calls a function</li> <li>In Python, I can write a function that requires an argument</li> <li>In Python, I can write a function with a return value</li> </ul>"},{"location":"schedule/","title":"Schedule","text":"<p>The course is learner-centered</p> <p>The course is learner-centered (Why?). This means that the pace is determined be the learners (i.e. not by the clock). The breaks are always on the time specified.</p> What are the course dates? <p>See the course dates.</p> Time Topic 09:00-10:00 Using the Python interpreter 10:00-10:15 Break 10:15-11:00 The way of the program 11:00-11:15 Break 11:15-12:00 Working with Python scripts 12:00-13:00 Break 13:00-14:00 Variables, expressions and statements: variables 14:00-14:15 Break 14:15-15:00 Variables, expressions and statements: operators 15:00-15:15 Break 15:15-15:45 Variables, expressions and statements: user input 15:45-16:00 Evaluation <ul> <li>Modules and Python packages</li> <li>File IO</li> <li>Command line arguments</li> <li>Graphics</li> <li>Functions</li> </ul>","tags":["schedule","timetable"]},{"location":"topics/","title":"Overview of topics","text":"<pre><code>flowchart TD\n    python[[Python]]\n\n    %% Give a white background to all nodes, instead of a transparent one\n    classDef node fill:#fff,color:#000,stroke:#000\n\n    subgraph sub_programming_language[Programming language]\n      interpreted_language[Interpreted language]\n      programming_language[Programming language]\n      scripting_language[Scripting language]\n      interpreter[Interpreter]\n      scripts[Scripts]\n      text_files[Text files]\n    end\n    style sub_programming_language fill:#ccf,color:#000,stroke:#fcc\n\n    subgraph sub_programming_terms[Programming terms]\n      user_input[User input]\n      file_io[File I/O]\n      command_line_arguments[Command-line arguments]\n      variables[Variables]\n      operators[Operators]\n      functions[Functions]\n      python_packages[Python packages]\n      graphics[Graphics]\n    end \n    style sub_programming_terms fill:#cfc,color:#000,stroke:#fcc\n\n    subgraph sub_uppmax[NAISS]\n      uppmax[Your HPC center]\n      uppmax_modules[modules]\n      uppmax_clusters[Your HPC cluster]\n      text_editors[Text editors]\n      x_forwarding[X-forwarding]\n      remote_desktop[Remote desktop]\n    end\n    style sub_uppmax fill:#fcc,color:#000,stroke:#fcc\n\n    python --&gt; |is a| programming_language\n    python --&gt; |is a| interpreted_language\n    python --&gt; |is a| scripting_language\n\n    programming_language --&gt; |uses| text_files\n    interpreted_language --&gt; |has a| interpreter\n    scripting_language --&gt; |is|interpreted_language\n    scripting_language --&gt; |runs| scripts\n    scripts --&gt; |are| text_files\n    scripts --&gt; |can use| command_line_arguments\n\n    python --&gt; |has| python_packages\n    python --&gt; |has| variables\n    python --&gt; |has| functions\n    python --&gt; |has| operators\n    functions --&gt; |use| variables\n    operators --&gt; |work on| variables\n    python_packages --&gt; |allow| graphics\n    python_packages --&gt; |allow to use| user_input\n    python_packages --&gt; |allow to do| file_io\n    python_packages --&gt; |allow to use| command_line_arguments\n\n    uppmax --&gt; |has| uppmax_clusters\n    uppmax_clusters --&gt; |have| uppmax_modules\n    uppmax_clusters --&gt; |have| text_editors\n    uppmax_clusters --&gt; |allow| x_forwarding\n    uppmax_clusters --&gt; |has| remote_desktop\n    uppmax_modules --&gt; |allow the use of| python_packages\n    uppmax_modules --&gt; |allow the use of| interpreter\n\n    text_editors --&gt; |work on|text_files\n    x_forwarding --&gt; |allows|graphics\n    remote_desktop --&gt; |allows|graphics\n\n    variables ~~~ uppmax</code></pre>","tags":["topics","overview"]},{"location":"classic_sessions/afternoon_exercise/","title":"Exercise","text":""},{"location":"classic_sessions/afternoon_exercise/#assignment-1-similarity-of-sequences","title":"Assignment 1: similarity of sequences","text":"<p>In this exercise you will write a program that calculates the distance between two sequences, e.g:</p> <pre><code>seq1 = \"ACGT\"\nseq2 = \"AGGT\"\n</code></pre> <p>A simple program (without functions or modules) is sufficient.</p> Solution <pre><code># define sequences\nseq1 = \"ACGT\"\nseq2 = \"AGGT\"\n\n# initiate counter\ndistance_score = 0\n\n# for each letter in the sequences\nfor a,b in zip(seq1, seq2)\n\n    # if they don't match, add a distance point\n    if a != b:\n        distance_score += 1\n\n# print result to the terminal\nprint(\"Distance between A and B: \", distance_score)\n</code></pre>"},{"location":"classic_sessions/afternoon_exercise/#assignment-11-calculate-the-distance","title":"Assignment 1.1: Calculate the distance","text":"<p>Calculate the distance between the following sequences and print out the result. Since the following sequences are already aligned, we can calculate the distance between them. Change your program so that it can read two aligned sequences from the command line. Test your program with the following sequences.</p> <pre><code>a) ACGT and A-GT\nb) AC-GT and AGT--\nc) AC-CGT and AGT---\nd) ACCGT and TGCCA\ne) GATT-ACA and TACCATAC\nf) --GA--TT--AC-A and TA--CC--AT--CA\n</code></pre> Solution <pre><code>import sys\n\n# read sequences from command line arguments\nseq1 = sys.argv[1]\nseq2 = sys.argv[2]\n\n# initiate counter\ndistance_score = 0\n\n# for each letter in the sequences\nfor a,b in zip(seq1, seq2)\n\n    # if they don't match, add a distance point\n    if a != b:\n        distance_score += 1\n\n# print result to the terminal\nprint(f\"Distance between A and B: {distance_score}\")\n</code></pre> <p>Screen output:</p> <pre><code>Distance between seq1 and seq2: 1\nDistance between seq1 and seq2: 4\nDistance between seq1 and seq2: 5\nDistance between seq1 and seq2: 4\nDistance between seq1 and seq2: 7\nDistance between seq1 and seq2: 13\n</code></pre>"},{"location":"classic_sessions/afternoon_exercise/#assignment-12-print-aligned-sequences","title":"Assignment 1.2: print aligned sequences","text":"<p>Extend the program that the aligned sequences are printed out additionally to their distance.</p> Solution <pre><code>print(\"Sequence seq1: \", seq1)\nprint(\"Sequence seq2: \", seq2)\nprint(\"Distance between seq1 and seq2: \", distance_score)\n</code></pre> <p>Screen output:</p> <pre><code>Sequence seq1: ACGT\nSequence seq2: A-GT\nDistance between seq1 and seq2: 1\n\nSequence seq1: AC-GT\nSequence seq2: AGT--\nDistance between seq1 and seq2: 4\n</code></pre>"},{"location":"classic_sessions/afternoon_exercise/#assignment-13","title":"Assignment 1.3","text":"<p>Extend the program that the distance between two sequences is only calculated when both sequences have the same length. Test your program with the input sequences:</p> <pre><code>a) ACGT and AGT\nb) ACCGT and TGCCA\n</code></pre> <p>Note: Here you can use either the <code>assert</code> keyword or an <code>if</code> clause. You could also raise a custom exception using <code>try-except</code>.</p> Solution <pre><code>import sys\n\n# read sequences from command line arguments\nseq1 = sys.argv[1]\nseq2 = sys.argv[2]\n\nassert len(seq1) == len(seq2), \"Sequences must be of same length\"\n\n# initiate counter\ndistance_score = 0\n\n# for each letter in the sequences\nfor a,b in zip(seq1, seq2)\n\n    # if they don't match, add a distance point\n    if a != b:\n        distance_score += 1\n\n# print result to the terminal\nprint(f\"Distance between A and B: {distance_score}\")\n</code></pre>"},{"location":"classic_sessions/afternoon_exercise/#assignment-14","title":"Assignment 1.4","text":"<p>Extend the program that the second sequence is inverted and assigned to a third sequence. Please, read the first and second sequence from the command line. Calculate the distances between the first and the second and between the first and the third sequence.</p> <p>Compare the distance between the first and the second and the first and the third sequence and print the alignment with the smaller distance. If the distances are equal, then print the alignment of the first and second sequence.</p> <p>Test your program with the following sequences:</p> <pre><code>a) ACGT and A-GT\nb) AC-GT and AGT--\nc) ACCGT and TGCCA\nd) GATT-ACA and TACCATAC\n</code></pre> Solution <pre><code>import sys\n\n# get sequences from the command line arguments\nseq1 = sys.argv[1]\nseq2 = sys.argv[2]\n\n### reverse the seq2 string and save as seq2_rev\n\n# initiate variable\nseq2_rev = \"\"\n\n# for each letter in seq2\nfor i in range(len(seq2)):\n    # add the next character to the reversed seq2 string\n    seq2_rev += seq2[len(seq2) - i - 1]\n\n# only run the calculation if the sequences have the same length\nif (len(seq1) == len(seq2)):\n\n    # initiate counters\n    dist_1_2 = 0\n    dist_1_2rev = 0\n    # for each letter in the sequences\n    for i in range(len(seq1)):\n\n        # if they don't match, add a distance point\n        if (seq1[i] != seq2[i]):\n            dist_1_2 += 1\n\n        # if they don't match, add a distance point\n        if (seq1[i] != seq2_rev[i]):\n            dist_1_2rev += 1\n\n# if the distance seq1seq2 is less or eq to distance seq1seq2_rev\nif (dist_1_2 &lt;= dist_1_2rev):\n    # print the seq1seq2 sequences and distance score\n    print(\"Sequence seq1: \", seq1)\n    print(\"Sequence seq2: \", seq2)\n    print(\"Distance between seq1 and seq2: \", dist_1_2)\n\n# else, if the seq1seq2_rev distance is less than seq1seq2\nelse:\n    # print the seq1seq2_rev sequences and distance score\n    print(\"Sequence seq1: \", seq1)\n    print(\"Sequence seq2_rev: \", seq2_rev)\n    print(\"Distance between seq1 and seq2_rev: \", dist_1_2rev)\n\n# tell the user the lengths differ\nelse:\n    print(\"Sequences seq1 and seq2 are of different length.\")\n</code></pre> <p>Screen output:</p> <pre><code>Sequence seq1: ACGT\nSequence seq2: A-GT\nDistance between seq1 and seq2: 1\n\nSequence seq1: AC-GT\nSequence seq2: AGT--\nDistance between seq1 and seq2: 4\n\n# and so on\n</code></pre>"},{"location":"classic_sessions/afternoon_exercise/#assignment-2-functions","title":"Assignment 2: Functions","text":""},{"location":"classic_sessions/afternoon_exercise/#assignment-21","title":"Assignment 2.1","text":"<p>Open an editor and save your new program. In this program we will create a few functions.</p>"},{"location":"classic_sessions/afternoon_exercise/#assignment-22","title":"Assignment 2.2","text":"<p>Define two functions <code>similarity</code> and <code>distance</code>:</p> <pre><code>\\text{similarity}(a, b)=\\left\\{\\begin{array}{rll}\n1, &amp; \\text { if } &amp; a=b \\\\\n0.5, &amp; \\text { if } &amp; a \\neq b, \\mathrm{a} \\text { and } \\mathrm{b} \\text { are both purines or pyrimidines } \\\\\n0, &amp; \\text { if } &amp; a \\neq b, \\mathrm{a} \\text { and } \\mathrm{b} \\text { are not the same kind }\n\\end{array}\\right.\n</code></pre> <p>And:</p> <pre><code>\\operatorname{distance}(a, b)=\\left\\{\\begin{array}{rll}\n0, &amp; \\text { if } \\quad a=b \\\\\n0.5, &amp; \\text { if } \\quad a \\neq b, \\text { a and } \\mathrm{b} \\text { are both purines or pyrimidines } \\\\\n1, &amp; \\text { if } \\quad a \\neq b, \\mathrm{a} \\text { and } \\mathrm{b} \\text { are not the same kind }\n\\end{array}\\right.\n</code></pre> <p>Note: Purines are A and G, pyrimidines are C and T.</p> Solution functions.py<pre><code># define which bases are purines and pyrimidines\npur = [\"A\", \"G\"]\npyr = [\"C\", \"T\"]\n\n# define the similarity function for two single bases\ndef similarity(base1, base2):\n\n    # if they match, return 1\n    if (base1 == base2):\n        return 1\n\n    # else,if they dont match but are of the same kind\n    elif (((base1 in pur) and (base2 in pur)) or ((base1 in pyr) and (base2 in pyr))):\n        return 0.5\n\n    # if they neither matches or are of the same kind, return 0\n    else:\n        return 0\n\n# define the distance function for two single bases\ndef distance(base1, base2):\n\n    # if they match, return 0\n    if (base1 == base2):\n        return 0\n\n    # else,if they dont match but are of the same kind\n    elif (((base1 in pur) and (base2 in pur)) or ((base1 in pyr) and (base2 in pyr))):\n        return 0.5\n\n    # if they neither matches or are of the same kind, return 1\n    else:\n        return 1\n</code></pre>"},{"location":"classic_sessions/afternoon_exercise/#assignment-23","title":"Assignment 2.3","text":"<p>Write two functions <code>sequence_similarity</code> and <code>sequence_distance</code>, which calculates the similarity and distance of two whole sequences.</p> Solution functions.py<pre><code># define the similarity function for whole sequences\ndef sequence_similarity (seq1, seq2):\n\n    # initiate counter\n    similarity_score = 0.0\n\n    # go through all bases in seq1\n    for i in range(len(seq1)):\n\n        # calculate their similarity and add to the score\n        similarity_score = similarity_score + similarity(seq1[i], seq2[i])\n\n    # return the final score\n    return similarity_score\n\n\n# define the distance function for whole sequences\ndef sequence_distance(seq1, seq2):\n\n    # initiate counter\n    distance_score = 0.0\n\n    # go through all bases in seq1\n    for i in range(len(seq1)):\n\n        # calculate the distance and add to the score\n        distance_score = distance_score + distance(seq1[i], seq2[i])\n\n    # return the final score\n    return distance_score\n</code></pre>"},{"location":"classic_sessions/afternoon_exercise/#assignment-24","title":"Assignment 2.4","text":"<p>Calculate the similarity and distance for the following sequences. Read these sequences from the command line and print out their similarity and distance.</p> <pre><code>a) ACGT and TGCA\nb) ATAG and ACAC\nc) ACGC and ATTT\nd) AGTT and ACTT\ne) TCGC and AGAG\n</code></pre> Solution main.py<pre><code>import sys\n\n### Paste here the code for the functions you wrote in 1.2 and 1.3 ###\n\n# read the sequences from command line arguments\nseq1 = sys.argv[1]\nseq2 = sys.argv[2]\n\n# print the similarity and distance\nprint(\"Similarity: \", sequence_similarity(seq1, seq2))\nprint(\"Distance: \", sequence_distance(seq1, seq2))\n</code></pre> <p>Screen output:</p> <pre><code>Similarity: 0.0\nDistance: 4.0\n\nSimilarity: 2.5\nDistance: 1.5\n\n# and so on\n</code></pre>"},{"location":"classic_sessions/afternoon_exercise/#assignment-3","title":"Assignment 3","text":"<p>In this exercise we will write three different programs.</p>"},{"location":"classic_sessions/afternoon_exercise/#assignment-31","title":"Assignment 3.1","text":"<p>Write a new Python file (module) called <code>sequence_tools.py</code> which contain both the two functions <code>similarity</code> and <code>distance</code> as defined previously.</p> Solution sequence_tools.py<pre><code>#########################\n### sequence_tools.py ###\n#########################\n\n# define which bases are purines and pyrimidines\npur = [\"A\", \"G\"]\npyr = [\"C\", \"T\"]\n\n# define the similarity function for two single bases\ndef similarity(base1, base2):\n    # if they match, return 1\n    if (base1 == base2):\n        return 1\n    # else,if they dont match but are of the same kind\n    elif (((base1 in pur) and (base2 in pur)) or ((base1 in pyr) and (base2 in pyr)))\n        return 0.5\n    # if they neither matches or are of the same kind, return 0\n    else:\n        return 0\n\n# define the distance function for two single bases\ndef distance(base1, base2):\n    # if they match, return 0\n    if (base1 == base2):\n        return 0\n    # else,if they dont match but are of the same kind\n    elif (((base1 in pur) and (base2 in pur)) or ((base1 in pyr) and (base2 in pyr)))\n        return 0.5\n    # if they neither matches or are of the same kind, return 1\n    else:\n        return 1\n\n# define the similarity function for whole sequences\ndef sequence_similarity (seq1, seq2):\n    # initiate counter\n    similarity_score = 0.0\n    # go through all bases in seq1\n    for i in range(len(seq1)):\n        # calculate their similarity and add to the score\n        similarity_score = similarity_score + similarity(seq1[i], seq2[i])\n    # return the final score\n    return similarity_score\n\n\n# define the distance function for whole sequences\ndef sequence_distance(seq1, seq2):\n    # initiate counter\n    distance_score = 0.0\n    # go through all bases in seq1\n    for i in range(len(seq1)):\n        # calculate the distance and add to the score\n        distance_score = distance_score + distance(seq1[i], seq2[i])\n    # return the final score\n    return distance_score\n</code></pre>"},{"location":"classic_sessions/afternoon_exercise/#assignment-32","title":"Assignment 3.2","text":"<p>Write another Python file that calculates for each combination of two sequences stored in list <code>seq_list</code> the similarity and distance using the module defined previously.</p> <pre><code>l = [\"ATCCGGT\", \"GCGTTAC\", \"CTACTGC\", \"TTGCAGT\", \"AGTCACC\"]\n</code></pre> Solution main.py<pre><code>from sequence_tools import *\n\n# define sequences\nseq_list = [\"ATCCGGT\", \"GCGTTAC\", \"CTACTGC\", \"TTGCAGT\", \"AGTCACC\"]\n\n# loop over each sequence in seq_list\nfor i in range(len(seq_list)):\n\n    # loop over the remaining sequences in seq_list\n    for j in range(i+1, len(seq_list)):\n\n        # calculate the similarity and distance\n        similarity_score = sequence_similarity(seq_list[i], seq_list[j])\n        distance_score = sequence_distance(seq_list[i], seq_list[j])\n\n        # print the result for this comparison\n        print(seq_list[i], seq_list[j], \" Similarity: \", similarity_score, \" Distance: \", distance_score)\n</code></pre> <p>With output:</p> <pre><code>ATCCGGT GCGTTAC Similarity: 2.5 Distance: 4.5\nATCCGGT CTACTGC Similarity: 3.5 Distance: 3.5\nATCCGGT TTGCAGT Similarity: 4.5 Distance: 2.5\nATCCGGT AGTCACC Similarity: 3.5 Distance: 3.5\nGCGTTAC CTACTGC Similarity: 4.0 Distance: 3.0\nGCGTTAC TTGCAGT Similarity: 3.0 Distance: 4.0\nGCGTTAC AGTCACC Similarity: 2.0 Distance: 5.0\nCTACTGC TTGCAGT Similarity: 4.5 Distance: 2.5\nCTACTGC AGTCACC Similarity: 2.0 Distance: 5.0\nTTGCAGT AGTCACC Similarity: 2.5 Distance: 4.5\n</code></pre>"},{"location":"classic_sessions/afternoon_exercise/#assignment-33","title":"Assignment 3.3","text":"<p>Extend your program. Determine the combination of sequences with the highest similarity of all sequences stored in list l. Write these two sequences and the alignment into a new file, called <code>similar_sequences.txt</code>.</p> <p>For example for two given sequences: <code>ATC</code> and <code>ACC</code> The alignment would be:</p> <pre><code>ATC\n| |\nACC\n</code></pre> <p>And this alignment should be written to a new output file. Hint: A line-break in Python can be made by adding \u2019\\n\u2019 to the end of the line.</p> Solution main.py<pre><code>from sequence_tools import *\n\n# define sequences\nseq_list = [\"ATCCGGT\", \"GCGTTAC\", \"CTACTGC\", \"TTGCAGT\", \"AGTCACC\"]\n\n# define variables\nsimilarity_highscore = 0\nbest_seq1 = \"\"\nbest_seq2 = \"\"\n\n# loop over each sequence in seq_list\nfor i in range(len(seq_list)):\n\n    # compare the sequence to all remaining sequences in seq_list\n    for j in range(i+1, len(seq_list)):\n\n        # calculate the similarity\n        similarity_score = sequence_similarity(seq_list[i], seq_list[j])\n\n        # check if it's a new similarity highscore\n        if (similarity_score &gt; similarity_highscore):\n\n            # if it is, save this as the new highscore\n            similarity_highscore = similarity_score\n            best_seq1 = seq_list[i]\n            best_seq2 = seq_list[j]\n\n# create an empty string to add the alignment to\nalignment_matches = \"\"\n\n# go through each letter the best aligned pair\nfor i in range(len(best_seq1)):\n\n    # find places where they match\n    if (best_seq1[i] == best_seq2[i]):\n        alignment_matches = alignment_matches + \"|\"\n    # and places they don't match\n    else:\n        alignment_matches = alignment_matches + \" \"\n\n# write the sequences and the match symbols to file\noutfile = open(\"similar_sequences.txt\", \"w\")\noutfile.write(best_seq1 + \"\\n\")\noutfile.write(alignment_matches + \"\\n\")\noutfile.write(best_seq2 + \"\\n\")\n</code></pre> <p>Screen output:</p> <pre><code>ATCCGGT\n| | ||\nTTGCAGT\n</code></pre>"},{"location":"classic_sessions/afternoon_lecture/","title":"Afternoon Session","text":""},{"location":"classic_sessions/afternoon_lecture/#functions","title":"Functions","text":"<p>We are now going to introduce functions</p> <ul> <li>Functions in programming languages are similar to mathematical functions</li> <li>In principle, functions are used to avoid repetitions of the same code</li> <li>Functions are code fragments, which can be take one or more arguments and   can have a return value</li> <li>They have a name, a list of arguments and a code block, which does the actual   work and are defined by the <code>def</code> keyword</li> </ul> <pre><code>In [1]: def product(x, y):\n   ...:     return x * y\n\nIn [2]: product(3, 2)\nOut[2]: 6\n</code></pre> <p>Similarity of Sequence</p> <p>Let us write a function that calculates some measure of similarity between two strings e.g. a DNA sequences such as</p> <pre><code>GATCGTTCG\n || |||\nCATGGTTGA\n</code></pre> <p>where the element-wise distance function is given by:</p> <p></p> <p>and we want to calculate the sum over sequences \\(A\\) and \\(B\\) of same length \\(N\\).</p> \\[ D(A, B) = \\sum^N_{i=1} d(A_i, B_i) \\] <p>such that</p> <pre><code>GATCGTTCG\n || |||\nCATGGTTGA\n100100011\n</code></pre> <p>Yielding a total distance of 4. Let's write Python function that solves this problem</p> <pre><code>def sequence_distance(A, B):\n    # Store current distance\n    distance = 0\n\n    # Loop over index of A and B\n    for i in range(len(A)):\n        if A[i] != B[i]:\n            distance += 1\n\n    return distance\n\nA = \"GATCGTTCG\"\nB = \"CATGGTTGA\"\nsequence_distance(A, B)\n</code></pre> <p>Can we improve the function?</p> Tip <p>We require that the sequences are of equal length. We could easily verify this by using an <code>assert</code> statement</p> <pre><code>def sequence_distance(A, B):\n    # Assert equal length\n    assert len(A) == len(B), \"Must be of equal length\"\n    # Store current distance\n    distance = 0\n\n    # Loop over index of A and B\n    for i in range(len(A)):\n        if A[i] != B[i]:\n            distance += 1\n\n    return distance\n</code></pre> Tip <p>Remeber that the <code>range(len(seq))</code> is not considered idiomatic Python? The way to solve this when having to access elements from two iterables is using the <code>zip</code> function. Refactoring we get</p> <pre><code>def sequence_distance(A, B):\n    # Assert equal length\n    assert len(A) == len(B), \"Must be of equal length\"\n    # Store current distance\n    distance = 0\n\n    # Loop over index of A and B\n    for a, b in zip(A, B)\n        if a != b:\n            distance += 1\n\n    return distance\n</code></pre> Tip <p>If you are like me and hate typing - Python is the perfect language. We can write very short and expressive code using comprehensions</p> <pre><code>def sequence_distance(A, B):\n    return sum(a != b for a, b in zip(A, B))\n</code></pre>"},{"location":"classic_sessions/afternoon_lecture/#mutability-and-function-returns","title":"Mutability and function returns","text":"<p>By convention, a Python function either mutates the input arguments or returns something, but not both. It is also possible that function does nothing of the aforementioned. Let's see an example using a list which is a mutable object</p> MutateReturnJust print <pre><code>def my_append(l, new_element):\n    \"\"\"\n    Appends new element to list inplace\n    \"\"\"\n    l.append(new_element)\n</code></pre> <pre><code>def my_append(l, new_element):\n    \"\"\"\n    Appends new element to list and returns the new list\n    \"\"\"\n    l.append(new_element)\n    return l\n</code></pre> <pre><code>def my_append(l, new_element):\n    \"\"\"\n    Appends element to a copy of original list and prints it\n    \"\"\"\n    tmp = l.copy()\n    tmp.append(new_element)\n    print(tmp)\n</code></pre>"},{"location":"classic_sessions/afternoon_lecture/#modules","title":"Modules","text":"<ul> <li>A program can be divided into smaller, better manageable units, so called   modules (files ending with <code>.py</code>)</li> <li>Improves reusability of code: when someone wrote something useful, someone   else can use the same code in his program</li> <li>A program can consist of several modules where each module can contain   several coherent functions (and classes)</li> </ul> <p>Let's look at an example by creating a simple math module. Let's structure the code in a new directory called <code>mathlib</code>. First create a new directory and <code>cd</code> into it</p> <pre><code>mkdir mathlib &amp;&amp; cd $_\n</code></pre> <p>Next start by creating a module called <code>math_funcs.py</code></p> math_funcs.py<pre><code>def add(a, b):\n    return a + b\n\ndef sub(a, b):\n    return a - b\n\ndef mul(a, b):\n    return a * b\n</code></pre> <p>Next we will create a new module that call the functions we defined in <code>math_funcs.py</code> and performs some calculations - let's call it <code>calculate.py</code></p> calculate.py<pre><code>import math_funcs as mf\n\na = 3\nb = 1\n\nprint(f\"{a} + {b} = {mf.add(a, b)}\")\nprint(f\"{a} - {b} = {mf.sub(a, b)}\")\nprint(f\"{a} * {b} = {mf.mul(a, b)}\")\n</code></pre> <p>Imports and namespaces</p> <p>Notice that the <code>import</code> statement makes the functions of <code>math_funcs.py</code> accessible from <code>calculate.py</code>. In this case we attached <code>math_funcs</code> the namespace <code>mf</code> for short. To access the functions we need to use the dot notation. An alternative could have been to</p> <pre><code>from math_funcs import add, sub, mul\n\nadd(a, b) # No need for dot notation\n</code></pre> <p>We could also have skipped the aliasing</p> <pre><code>import math_funcs\n\nmath_funcs.add(a, b) # Now we need to write it all out\n</code></pre> <p>A big no no is using wildcard imports <code>from module import *</code>. This will clutter the namespace!</p> <p>Takeaways</p> <ul> <li>Modules and functions help you organize and write good quality code</li> <li>Modules can be distributed as packages - extending the functionality of   Python. The ecosystem of packages is one of the reasons that make Python   great.</li> </ul>"},{"location":"classic_sessions/afternoon_lecture/#command-line-arguments-and-io","title":"Command line arguments and IO","text":"<p>You already know what a command-line interface (CLI) program is!</p> <pre><code>mkdir dir_name\n</code></pre> <p>Where <code>mkdir</code> is the command and <code>dir_name</code> is the input argument. What if we want to design such a program in Python? Let's continue working on our \"Similarity of Sequence\" example. The goal when we are done will be to</p> <p>Read text files containing DNA sequences, passed as arguments to a program called <code>read_seq.py</code></p> <p>Let's ignore the reading of text files for now. First create a new directory called <code>dna_lib</code> and <code>cd</code> into it</p> <pre><code>mkdir dna_lib &amp;&amp; cd $_\n</code></pre> <p>For the purpose of practicing working with modules let's separate our program into separate modules. First create a module called <code>dna_metrics.py</code></p> dna_metrics.py<pre><code>def sequence_distance(A, B):\n    # Assert equal length\n    assert len(A) == len(B), \"Must be of equal length\"\n    # Store current distance\n    distance = 0\n\n    # Loop over index of A and B\n    for a, b in zip(A, B)\n        if a != b:\n            distance += 1\n\n    return distance\n</code></pre> <p>Then create <code>read_seq.py</code></p> read_seq.py<pre><code>import dna_metrics as dm\nimport sys\n\n# Read command line args\nA = sys.argv[1]\nB = sys.argv[2]\n\nprint(f\"Distance between A and B is {dm.sequence_distance(A,B)}\")\n</code></pre> <p><code>if __name__ == \"__main__\"</code>\" convention</p> <p>By convention we usually wrap the code that \"runs\" our program in an <code>if</code> statement for executable programs. This is to ensure that program is not executed if imported by another module but only when called directly. The code would then look like this</p> read_seq.py<pre><code>import dna_metrics as dm\nimport sys\n\nif __name__ == \"__main__\":\n    # Read command line args\n    A = sys.argv[1]\n    B = sys.argv[2]\n\n    print(f\"Distance between A and B is {dm.sequence_distance(A,B)}\")\n</code></pre> <p>The condition <code>__name__ == \"__main__\"</code> is only satisfied for the entry point module.</p>"},{"location":"classic_sessions/afternoon_lecture/#adding-some-input-output-io-functionality","title":"Adding some Input-Output (IO) functionality","text":"<p>We are now going to add some IO functionality. Rather than passing the sequences directly as arguments we are going to use the builtin <code>open</code> function to read files and instead of printing the results to the standard output we will dump the results into a text file. First let's create a new directory <code>data</code> that will contain <code>seq1.txt</code> and <code>seq2.txt</code></p> <pre><code>mkdir data\ntouch seq1.txt seq2.txt\n</code></pre> Sequence 1Sequence 2 seq1.txt<pre><code>GATCGTTCG\n</code></pre> seq2.txt<pre><code>CATGGTTGA\n</code></pre> <p>Let's explore the <code>open</code> command from <code>ipython</code> using <code>seq1.txt</code></p> <pre><code>[ins] In [1]: inputfile = open(\"seq1.txt\", \"r\")\n\n[ins] In [2]: inputfile\nOut[2]: &lt;_io.TextIOWrapper name='seq1.txt' mode='r' encoding='UTF-8'&gt;\n\n[ins] In [3]: A = inputfile.readline()\n\n[ins] In [4]: A\nOut[4]: 'GATCGTTCG\\n'\n\n[ins] In [5]: A.strip()\nOut[5]: 'GATCGTTCG'\n</code></pre> <p>Adapting our program accordingly using the keyword <code>with</code> to define a context in which the file is open.</p> read_seq.py<pre><code>import dna_metrics as dm\nimport sys\n\nif __name__ == \"__main__\":\n    # Read command line args\n    with open(sys.argv[1], \"r\") as f:\n        A = f.readline().strip()\n\n    with open(sys.argv[2], \"r\") as f:\n        B = f.readline().strip()\n\n    print(f\"Distance between A and B is {dm.sequence_distance(A,B)}\")\n</code></pre> <p>Now run the script</p> <pre><code>$ python read_seq.py data/seq1.txt data/seq2.txt\nDistance between A and B is 4\n</code></pre> <p>As a final step we will save the results into an output file</p> read_seq.py<pre><code>import dna_metrics as dm\nimport sys\n\nif __name__ == \"__main__\":\n    # Read command line args\n    with open(sys.argv[1], \"r\") as f:\n        A = f.readline().strip()\n\n    with open(sys.argv[2], \"r\") as f:\n        B = f.readline().strip()\n\n    with open(sys.argv[3], \"w\") as f:\n        f.write(f\"Distance between A and B is {dm.sequence_distance(A,B)}\")\n</code></pre> <p>Let's run the script a final time</p> <pre><code>$ python read_seq.py data/seq1.txt data/seq2.txt out\n$ cat out\nDistance between A and B is 4\n</code></pre>"},{"location":"classic_sessions/afternoon_lecture/#objects-oriented-python-bonus-if-there-is-time","title":"Objects Oriented Python (Bonus if there is time)","text":"<p>Classes provide a means of bundling data and functionality together. Creating a new class creates a new type of object, allowing new instances of that type to be made. Each class instance can have attributes attached to it for maintaining its state. Class instances can also have methods (defined by its class) for modifying its state. ref</p>"},{"location":"classic_sessions/morning_exercise/","title":"Exercises","text":"<p>For the first assignment of this exercise session you should get familiar with the Python-interpreter. In the second assignment you will write your first Python program using an editor. More instructions are given in the following how to use both, the Python-interpreter and an editor. Good luck!</p>"},{"location":"classic_sessions/morning_exercise/#assignment-1","title":"Assignment 1","text":""},{"location":"classic_sessions/morning_exercise/#assignment-11","title":"Assignment 1.1","text":"<p>Start by typing the following command into the Python interpreter:</p> <pre><code>print(\"Assignment 7\")\n</code></pre> What happens? <pre><code>&gt;&gt;&gt; print(\"Assignment7\")\nAssignment7\n</code></pre>"},{"location":"classic_sessions/morning_exercise/#assignment-12","title":"Assignment 1.2","text":"<p>Enter now <code>i = 10</code> in the Python-interpreter and then (in a new line) <code>print(i)</code>. After that (in a new line) enter <code>j = i/2</code> and (in a new line) <code>print(j)</code>.</p> What values are displayed and why? <pre><code>&gt;&gt;&gt; i = 10\n&gt;&gt;&gt; print(i)\n10\n&gt;&gt;&gt; j = i/2\n&gt;&gt;&gt; print(j)\n5.0\n</code></pre>"},{"location":"classic_sessions/morning_exercise/#assignment-13","title":"Assignment 1.3","text":"<p>Assign to variable <code>7assignment</code> the string <code>\"black magic\"</code>. Don't forget to put the string in quotation marks (\" \").</p> What error occurs and why? <pre><code>&gt;&gt;&gt; 7Assignment = \"black magic\"\n  File \"&lt;stdin&gt;\", line 1\n    7Assignment = \"black magic\"\n              ^\nSyntaxError: invalid syntax\n</code></pre>"},{"location":"classic_sessions/morning_exercise/#assignment-14","title":"Assignment 1.4","text":"<p>Assign to variable <code>A</code> a sequence <code>AGCTA</code> (don't forget to put the sequence in quotation marks). Use the built-in function <code>len()</code> to determine the length of the sequence <code>A</code> and assign the length of <code>A</code> to variable <code>i</code>. Print <code>A</code> and <code>i</code>.</p> Output <pre><code>&gt;&gt;&gt; A = \"AGCTA\"\n&gt;&gt;&gt; i = len(A)\n&gt;&gt;&gt; print(A, i)\nAGCTA 5\n</code></pre>"},{"location":"classic_sessions/morning_exercise/#assignment-15","title":"Assignment 1.5","text":"<p>Concatenate <code>A</code> and <code>i</code> and print the result.</p> What happens and why? <pre><code>&gt;&gt;&gt; print(A + i)\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nTypeError: must be str, not int\n</code></pre>"},{"location":"classic_sessions/morning_exercise/#assignment-16","title":"Assignment 1.6","text":"<p>Now enter <code>print(A + str(i))</code>.</p> What happens now? <pre><code>&gt;&gt;&gt; print(A + str(i))\nAGCTA5\n</code></pre> <p>Hint: What might the built-in function <code>str()</code> do? There are also other built-in functions, e.g., to convert a string or number to an integer: <code>int()</code>, or to convert a string or number to a floating point: <code>float()</code>.</p>"},{"location":"classic_sessions/morning_exercise/#assignment-17","title":"Assignment 1.7","text":"<p>Print the substring of A from position 2 to 4. The output should be <code>GCT</code>.</p> Solution <pre><code>&gt;&gt;&gt; print(A[1:4])\nGCT\n</code></pre>"},{"location":"classic_sessions/morning_exercise/#assignment-18","title":"Assignment 1.8","text":"<p>Print the prefix (beginning of a string) of length 2 and the suffix (end of a string) of length 2 of the sequence stored in A. The output should be AG and TA.</p> Solution <pre><code>&gt;&gt;&gt; print(A[:2])\nAG\n&gt;&gt;&gt; print(A[-2:])\nTA\n</code></pre>"},{"location":"classic_sessions/morning_exercise/#assignment-19","title":"Assignment 1.9","text":"<p>Write a for-loop with the loop variable <code>i</code>, which runs from <code>0</code> to <code>len(A)</code> and prints out <code>i</code>.</p> <p>Hint: Don\u2019t forget to indent the body of the for-loop.</p> <pre><code>??? tip \"Solution\"\n\n    ```python\n    &gt;&gt;&gt; for i in range(len(A)):\n    &gt;&gt;&gt;     print(i)\n    0\n    1\n    2\n    3\n    4\n    ```\n\nExecute the same for-loop a second time and print out the character at\neach position of string A using A[i] as well.\n</code></pre>"},{"location":"classic_sessions/morning_exercise/#assignment-110","title":"Assignment 1.10","text":"<p>Now add an if-condition inside the for-loop, which checks if <code>i &lt; len(A)/2</code>. Only print i and A[i] if this condition is true.</p> Solution <pre><code>&gt;&gt;&gt; for i in range(len(A)):\n&gt;&gt;&gt;     if (i &lt; len(A)/2):\n&gt;&gt;&gt;         print(i, A[i])\n0 A\n1 G\n2 C\n</code></pre>"},{"location":"classic_sessions/morning_exercise/#assignment-111","title":"Assignment 1.11","text":"<p>Write a while-loop, which produces the same output as the for-loop and if-condition together.</p> Solution <pre><code>&gt;&gt;&gt; i = 0\n&gt;&gt;&gt; while (i &lt; len(A)/2):\n&gt;&gt;&gt;     print(i, A[i])\n&gt;&gt;&gt;     i=i+1\n0 A\n1 G\n2 C\n</code></pre>"},{"location":"classic_sessions/morning_exercise/#assignment-112","title":"Assignment 1.12","text":"<p>Print the variable <code>A</code> again.</p> What happens? <pre><code>&gt;&gt;&gt; print(A)\nAGCTA\n</code></pre>"},{"location":"classic_sessions/morning_exercise/#assignment-113","title":"Assignment 1.13","text":"<p>Leave the interactive mode of Python with <code>quit()</code>.</p>"},{"location":"classic_sessions/morning_exercise/#assignment-114","title":"Assignment 1.14","text":"<p>Now return to the interactive mode of Python and print the variable <code>A</code>.</p> What happens now and why? <pre><code>Traceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nNameError: name 'A' is not defined\n</code></pre>"},{"location":"classic_sessions/morning_exercise/#assignment-2-write-a-small-program","title":"Assignment 2: Write a small program","text":""},{"location":"classic_sessions/morning_exercise/#assignment-21","title":"Assignment 2.1","text":"<p>Write a short program which compares two variables i and j. It should print the value 1, if i and j are equal, and otherwise the value 0.</p> Solution <p>Write the script <code>compare.py</code> using your favorite editor.</p> compare.py<pre><code>i = 3\nj = 4\nif i == j:\n    print(1)\nelse:\n    print(0)\n</code></pre> <p>Then run it from the command line using:</p> <pre><code>$ python compare.py\n0\n</code></pre>"},{"location":"classic_sessions/morning_exercise/#assignment-22","title":"Assignment 2.2","text":"<p>Within the program assign different numbers to i and j, e.g.:</p> <pre><code>- `i = 3` and `j = 4`\n- `i = 10` and `j = 10`\n</code></pre> <p>Congratulations, you have now completed the basic python exercises for this session. If you were too quick or just want to try a bit harder exercises, please continue with the bonus exercises below.</p>"},{"location":"classic_sessions/morning_exercise/#bonus-assignment-3-sequences","title":"(Bonus) Assignment 3: Sequences","text":"<pre><code>In this exercise we write a short Python program (named `&lt;program_name&gt;.py`,\nthink of a reasonable program name and name your file accordingly. Replace\n&lt;program_name&gt; with your new program name).\n</code></pre>"},{"location":"classic_sessions/morning_exercise/#assignment-31","title":"Assignment 3.1","text":"<p>Chose two variables, e.g. A and B and assign the sequences <code>GATTACA</code> and <code>TACCATAC</code> to these variables. Make sure that the two sequences are assigned as strings to their variables A and B. Then print these sequences. Save everything you wrote and close the editor. Then you can run your program: <code>python3 &lt;program_name&gt;.py</code></p> Solution sequence_operations.py<pre><code>A = \"GATTACA\"\nB = \"TACCATAC\"\nprint(\"sequence A: \", A)\nprint(\"sequence B: \", B)\n</code></pre>"},{"location":"classic_sessions/morning_exercise/#assignment-32","title":"Assignment 3.2","text":"<p>Now extend the program: Concatenate both sequences in both ways (<code>AB</code> and <code>BA</code>) and print both options.</p> Solution sequence_operations.py<pre><code>A = \"GATTACA\"\nB = \"TACCATAC\"\nprint(\"sequence A + B: \", A + B)\nprint(\"sequence B + A: \", B + A)\n</code></pre> <p>Screen output:</p> <pre><code>sequence A + B:  GATTACATACCATAC\nsequence B + A:  TACCATACGATTACA\n</code></pre>"},{"location":"classic_sessions/morning_exercise/#assignment-33","title":"Assignment 3.3","text":"<p>Print prefixes and suffixes of length 3 of both sequences A and B. Use the built-in function <code>len()</code> for determining the suffixes.</p> Solution sequence_operations.py<pre><code>print(\"prefix A: \", A[:3])\nprint(\"prefix B: \", B[:3])\nsuffix_A = len(A) - 3\nsuffix_B = len(B) - 3\nprint(\"suffix A: \", A[suffix_A:])\nprint(\"suffix B: \", B[suffix_B:])\n\n# It is also possible to use a negative index\n# to count from the end:\nprint(\"suffix A: \", A[-3:])\nprint(\"suffix B: \", B[-3:])\n</code></pre> <p>Screen output:</p> <pre><code>prefix A: GAT\nprefix B: TAC\nsuffix A: ACA\nsuffix B: TAC\n</code></pre>"},{"location":"classic_sessions/morning_exercise/#assignment-34","title":"Assignment 3.4","text":"<p>Print out the second sequence from the last to the first position (last position first, first position last).</p> Solution sequence_operations.py<pre><code># Alternative 1\nfor i in range(len(B)):\n    print(B[len(B) - i - 1])\n\n# Alternative 2 (reversed range)\nfor i in range(len(B), 0, -1)\n    print(B[i-1])\n\n# Alternative 3 (reversed string)\nfor c in reversed(B):\n    print(c)\n\n# Alternative 4 (reverse slicing)\nfor c in B[::-1]\n    print(c)\n</code></pre> <p>Screen output:</p> <pre><code>C\nA\nT\nA\nC\nC\nA\nT\n</code></pre>"},{"location":"classic_sessions/morning_exercise/#assignment-35","title":"Assignment 3.5","text":"<p>Assign this inverted sequence to a third variable, you could use the variable name C, and print the value of this variable.</p>"},{"location":"classic_sessions/morning_exercise/#more-bonus-exercises","title":"More bonus exercises","text":"<p>Some extra bonus exercises have not been integrated into the webpage yet. You can find them here:</p> <ul> <li>More bonus exercises:   https://hackmd.io/@pmitev/UPPMAX-intro-Python-assignments1</li> </ul>"},{"location":"classic_sessions/morning_lecture/","title":"Introduction to Python","text":"<p>This module introduces the fundamentals of Python programming language.</p> <p>Content</p> <ul> <li>The course emphasises hands-on experience with Python in the UPPMAX   environment. It focuses on the basics and can be taken by someone without   any prior Python experience.</li> <li>You will learn:<ul> <li>How to load and use different version of Python on our clusters</li> <li>Basic and more advanced builtin data types</li> <li>Using control flow statements to define the logic of your Python program</li> <li>Grouping code into reusable functions and structuring your program into   modules</li> <li>Creating small command line programs that can take input arguments</li> <li>Reading and writing to files in Python</li> </ul> </li> </ul>"},{"location":"classic_sessions/morning_lecture/#schedule","title":"Schedule","text":"Time Topic 09:00-10:00 Basic and Sequence data types 10:00-10:15 Break 10:15-11:00 Control flow statements 11:00-12:00 Exercises 13:00-14:00 Functions and Modules 14:00-14:15 Break 14:15-15:00 Command line arguments and IO 15:00-15:15 Break 15:15-16:00 Exercises"},{"location":"classic_sessions/morning_lecture/#what-is-python","title":"What is Python?","text":"<ul> <li>Developed by Guido van Rossum in the early 1990s</li> <li>Named after the British comedy group \"Monty Python\",  not after the reptile</li> <li>Python is available for all operating systems for free</li> <li>Python is easy to learn (not master)</li> <li>Has a big ecosystem of packages for scientific computing</li> <li>Has a big community</li> <li>Commonly used in many scientific fields</li> </ul>"},{"location":"classic_sessions/morning_lecture/#getting-started","title":"Getting Started","text":"<p>Link to HackMd: https://hackmd.io/@dianai/uppmax-intro/</p> <p>To work with Python on UPPMAX:</p> <ul> <li>Login to Rackham</li> <li>Load the Python module</li> <li>Pick how to work</li> </ul>"},{"location":"classic_sessions/morning_lecture/#login-to-rackham","title":"Login to Rackham","text":"<p>First, login to Rackham from your terminal. This is described at the UPPMAX page 'Login to Rackham' here.</p> How to login to Rackham from your terminal? <p>This is described at the UPPMAX page 'Login to Rackham' here.</p> <p>Spoiler:</p> <pre><code>ssh [username]@rackham.uppmax.uu.se\n</code></pre> <p>where <code>[username]</code> is your UPPMAX username, for example:</p> <pre><code>ssh sven@rackham.uppmax.uu.se\n</code></pre>"},{"location":"classic_sessions/morning_lecture/#load-the-python-module","title":"Load the Python module","text":"<p>Load Python version 3.10.8. This is described at the UPPMAX pages on Python here.</p> How to load Python version 3.10.8? <p>This is described at the UPPMAX pages on Python here.</p> <p>Spoiler:</p> <pre><code>module load python/3.10.8\n</code></pre>"},{"location":"classic_sessions/morning_lecture/#pick-how-to-work","title":"Pick how to work","text":"<p>There are multiple ways to develop Python code:</p> <ul> <li>Using Python scripts with a text editor</li> <li>Using the Python interpreter</li> <li>Using IPython</li> <li>Using Jupyter</li> </ul> <p>We can work with Python either interactively or by writing our code into files (so-called Python scripts) with the <code>.py</code> suffix.</p> <p>Interactive \"Hello, world!\"</p> <p>The canonical way of working interactively is using the Python interpreter which comes with the language. This is a so called REPL (read-eval-print loop) programming environment.</p> <p>A read\u2013eval\u2013print loop (REPL), also termed an interactive toplevel or language shell, is a simple interactive computer programming environment that takes single user inputs, executes them, and returns the result to the user; a program written in a REPL environment is executed piecewise (wiki link).</p> <pre><code># start the interpreter\npython\n</code></pre> <p>This will take you to the interpreter where you can start writing Python code (Think of it as a calculator for code).</p> <pre><code>Python 3.10.8 (main, Nov 15 2022, 21:16:40) [GCC 12.2.0] on linux\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n&gt;&gt;&gt; print(\"Hello, world!\")\nHello, world!\n&gt;&gt;&gt;\n</code></pre> <p>We can use Python as a calculator. Try the following</p> <pre><code>&gt;&gt;&gt; 2 + 2\n4\n&gt;&gt;&gt; 50 - 5*6\n20\n&gt;&gt;&gt; (50 - 5*6) / 4\n5.0\n&gt;&gt;&gt; 12.45 / 100 + 7.5e-3\n0.132\n&gt;&gt;&gt;\n</code></pre> <p>A modern alternative is with more bells and whistles is <code>IPython</code>. This is also the backbone of the very popular Jupyter Notebook that you might be familiar with. The \"Hello, world!\" example is completely analogous</p> <pre><code># start ipython\nipython\n</code></pre> <p>And,</p> <pre><code>Python 3.10.8 (main, Nov 15 2022, 21:16:40) [GCC 12.2.0]\nType 'copyright', 'credits' or 'license' for more information\nIPython 8.6.0 -- An enhanced Interactive Python. Type '?' for help.\n\nIn [1]: print(\"Hello, world!\")\nHello, world!\n\nIn [2]:\n</code></pre> <p>We recommend using <code>IPython</code> for this course but you are welcome to choose whatever you prefer!</p> <ul> <li>Anything that you can do in the Python interpreter you can also do in   <code>IPython</code></li> <li>I will likely use \"Python interpreter\" also to refer to IPython</li> <li>You can exit the interpreter with <code>exit()</code>, <code>quit()</code> or pressing   <code>Ctrl-D</code>.</li> <li>Tips and tricks of how to navigate IPython</li> </ul> <p>Scripting \"Hello, world!\"</p> <p>The interpreter is very handy if we want to test things out or need to work interactively, but, often what we want is to write an executable script or library that can be shared, documented and reused. Let's write a hello world script!</p> <p>First create a file (module) called <code>hello_world.py</code> with your preferred editor</p> <pre><code>vim hello_world.py\n</code></pre> <p>Next, write the same code as before</p> hello_world.py<pre><code>print(\"Hello, world!\")\n</code></pre> <p>Save and close the file and then run the script from the command line</p> <pre><code>$ python hello_world.py\nHello, world!\n</code></pre>"},{"location":"classic_sessions/morning_lecture/#variable-assignment","title":"Variable assignment","text":"<p>Any and all values (objects) in Python can be assigned to a variable. As such Let's look at an example</p> <pre><code>In [1]: greeting = \"Welcome to our Introductory Python Course!\"\n\nIn [2]: print(greeting)\nWelcome to our Introductory Python Course!\nIn [3]: number = 2\n\nIn [4]: print(number)\n2\n\nIn [5]: number = 5\n\nIn [6]: print(number)\n5\n</code></pre> <p>The name on the left-hand side now refers to the result of evaluating the right-hand side, regardless of what it referred to before (if anything). From discussion</p> <pre><code>In [1]: x = \"hej\"\n\nIn [2]: type(x)\nOut[2]: str\n\nIn [3]: x = 1\n\nIn [4]: type(x)\nOut[4]: int\n</code></pre> <p>Variable names</p> <ul> <li> <p>Names of variables may be chosen freely, but</p> <ul> <li>must consist of a single word (no blanks)</li> <li>must not contain special characters except \"_\", and</li> <li>must not begin with a number</li> </ul> </li> <li> <p>Valid names are: <code>my_variable</code>, <code>Value15</code></p> </li> <li>Invalid names are: <code>my-variable</code>, <code>15th_value</code></li> </ul> Conventions<pre><code>module_name, package_name, ClassName, method_name, ExceptionName,\nfunction_name, GLOBAL_CONSTANT_NAME, global_var_name, instance_var_name,\nfunction_parameter_name, local_var_name\n</code></pre>"},{"location":"classic_sessions/morning_lecture/#python-data-types","title":"Python Data Types","text":"<p>We will now try to understand some of the builtin data types - you will be using these all the time. We will cover <code>Int</code>, <code>Float</code>, <code>List</code>, <code>Bool</code> and <code>String</code>. If we have some spare time we might also have a look at <code>Dict</code> and <code>Set</code>.</p> <pre><code>flowchart TD\n    A --- Numeric\n    A --- Boolean\n    A --- Dictionary\n    A --- Set\n    A[Fundamental builtin data types] --- Sequence\n\n\n    Numeric --- Integer\n    Numeric --- Float\n    Numeric --- Complex\n\n    Sequence --- String\n    Sequence --- List\n    Sequence --- Tuple</code></pre>"},{"location":"classic_sessions/morning_lecture/#numeric-datatypes","title":"Numeric Datatypes","text":"<p>The table below shows some of the most common operations that work on numeric data types (except complex). For more math functions see the <code>math</code> module included in the standard library as well as <code>numpy</code> and <code>scipy</code> which are the cornerstones of scientific computation in Python.</p> Operation Result <code>x + y</code> sum of x and y <code>x - y</code> difference of x and y <code>x * y</code> product of x and y <code>x / y</code> quotient of x and y <code>x // y</code> floored quotient of x and y <code>x % y</code> remainder of <code>x / y</code> <code>x ** y</code> x to the power of y <code>abs(x)</code> absolute value of x <code>int(x)</code> x converted to integer <code>float(x)</code> x converted to floating point <p>Table from the official Python docs</p> <p>Some examples</p> <p>Let's try some example in <code>ipython</code></p> <pre><code>In [1]: 4 + 2\nOut[1]: 6\n\nIn [2]: 4 + 2.0\nOut[2]: 6.0\n\nIn [3]: type(4 + 2.0)\nOut[3]: float\n\nIn [4]: 8 / 5\nOut[4]: 1.6\n\nIn [5]: 8 // 5\nOut[5]: 1\n\nIn [6]: int(2.1)\nOut[6]: 2\n\nIn [7]: int(2.9)\nOut[7]: 2\n\nIn [8]: x = 1\n\nIn [9]: x = x + 2\n\nIn [10]: x\nOut[10]: 3\n\nIn [11]: x = 1\n\nIn [12]: x += 2\n\nIn [13]: x\nOut[13]: 3\n</code></pre>"},{"location":"classic_sessions/morning_lecture/#strings","title":"Strings","text":"<p>Strings are a sequence data type representing unicode characters and is defined with single or double quotes.</p> <pre><code>    In [1]: greeting1 = \"Good Morning!\"\n\n    In [2]: greeting2 = 'Hello, How are you!'\n</code></pre> <p>We can actually several of the same operations we used for the numeric data type on strings.</p> <p>String operations</p> <pre><code>In [1]: greeting1 = \"Good Morning!\"\n\nIn [2]: greeting2 = \"Hello, How are you!\"\n\nIn [3]: greeting1 + greeting2\nOut[3]: 'Good Morning!Hello, How are you!'\n\nIn [4]: greeting = \"Welcome to our Introductory Python Course!\"\n\nIn [5]: number = 2\n\nIn [6]: greeting + number\n---------------------------------------------------------------------------\nTypeError                                 Traceback (most recent call last)\nCell In [6], line 1\n----&gt; 1 greeting + number\n\nTypeError: can only concatenate str (not \"int\") to str\n\nIn [7]: greeting + str(number)\nOut[7]: 'Welcome to our Introductory Python Course!2'\n\nIn [8]: greeting = \"Welcome to our Introductory Python Course!\"\n\nIn [9]: number = 2\n\nIn [10]: greeting * number\nOut[10]: 'Welcome to our Introductory Python Course!Welcome to our Introductory Python Course!'\n\nIn [11]: greeting = \"Hello!\\n\"\n\nIn [12]: greeting * 8\nOut[12]: 'Hello!\\nHello!\\nHello!\\nHello!\\nHello!\\nHello!\\nHello!\\nHello!\\n'\n\nIn [14]: print(greeting * 8)\nHello!\nHello!\nHello!\nHello!\nHello!\nHello!\nHello!\nHello!\n</code></pre> <p>Notice also that a string object has many associated methods. Try using the <code>.</code>-notation to access methods (and attributes) by pressing <code>tab</code>.</p> <pre><code>In [3]: greeting1.\n            capitalize()   endswith()     index()        isdigit()      isspace()      lower()        removesuffix() rpartition()   startswith()   upper()\n            casefold()     expandtabs()   isalnum()      isidentifier() istitle()      lstrip()       replace()      rsplit()       strip()        zfill()\n            center()       find()         isalpha()      islower()      isupper()      maketrans()    rfind()        rstrip()       swapcase()\n            count()        format()       isascii()      isnumeric()    join()         partition()    rindex()       split()        title()\n            encode()       format_map()   isdecimal()    isprintable()  ljust()        removeprefix() rjust()        splitlines()   translate()\n</code></pre> <p>String methods</p> <pre><code>In [1]: my_string = \"This is a string\"\n\nIn [2]: my_string.upper()\nOut[2]: 'THIS IS A STRING'\n\nIn [3]: my_string.isnumeric()\nOut[3]: False\n\nIn [4]: my_string.split(\" \")\nOut[4]: ['This', 'is', 'a', 'string']\n</code></pre> <p>Remember that strings are sequences? This means that each character in a string has an index. We can use this to do all sorts of string slicing.</p> <p></p> <p>String indexing and slicing</p> <pre><code>In [1]: my_string = \"This is a string\"\n\nIn [2]: my_string[0]\nOut[2]: 'T'\n\nIn [3]: len(my_string)\nOut[3]: 16\n\nIn [4]: my_string[len(my_string) - 1]\nOut[4]: 'g'\n\nIn [5]: my_string[len(my_string)]\n---------------------------------------------------------------------------\nIndexError                                Traceback (most recent call last)\nCell In [5], line 1\n----&gt; 1 my_string[len(my_string)]\n\nIndexError: string index out of range\n\nIn [6]: my_string.index(\"i\")\nOut[6]: 2\n\nIn [7]: my_string[2:]\nOut[7]: 'is is a string'\n\nIn [8]: my_string[-1]\nOut[8]: 'g'\n\nIn [9]: my_string[-5:]\nOut[9]: 'tring'\n</code></pre>"},{"location":"classic_sessions/morning_lecture/#lists","title":"Lists","text":"<p>Just like <code>String</code> a <code>List</code> is a sequence data type. However, it is very different. A list if is a sequence of elements (objects) of arbitrary type i.e. we can have a list of strings a list of integers and a list of lists of strings and integers. Let's start by looking at how can define a list</p> <pre><code>In [1]: list_of_ints = [1, 5, 2]\n\nIn [2]: list_of_str = [\"hej\", \"du\"]\n\nIn [3]: list_of_str == \"hej du\".split(\" \")\nOut[3]: True\n\nIn [4]: mixed_list = [\"string\", 3, True, []]\n</code></pre> <p>Notice how all the elements of the list are inside the square brackets <code>[]</code> and how each element is separated by a comma <code>,</code>. Lists are extremely useful, here are some of the things you can do with them:</p> <ul> <li>Append new elements to the list</li> <li>Concatenate two (or more) lists</li> <li>Access individual elements by their index</li> <li>Perform some operation, reduction or transformation on all or some of   elements in the list</li> </ul> <p>Let's look at some examples</p> <pre><code>In [1]: l = []\n\nIn [2]: l.append(1)\n\nIn [3]: l\nOut[3]: [1]\n\nIn [4]: l.append(2)\n\nIn [5]: l\nOut[5]: [1, 2]\n\nIn [6]: m = [3, 4, 5]\n\nIn [7]: n = l + m\n\nIn [8]: n\nOut[8]: [1, 2, 3, 4, 5]\n\nIn [9]: n[3]\nOut[9]: 4\n\nIn [10]: len(n)\nOut[10]: 5\n\nIn [11]: sum(n)\nOut[11]: 15\n\nIn [13]: min(l)\nOut[13]: 3\n\nIn [14]: max(l)\nOut[14]: 244\n\nIn [15]: sorted(l)\nOut[15]: [3, 50, 170, 244]\n\nIn [16]: l.sort()\n\nIn [17]: l\nOut[17]: [3, 50, 170, 244]\n</code></pre>"},{"location":"classic_sessions/morning_lecture/#control-flow-statements","title":"Control Flow Statements","text":"<ul> <li>Control structures determine the logical flow of a program</li> <li>There are two types of key control structures in Python:<ul> <li>Loops: <code>for</code>, <code>while</code></li> <li>Conditions: <code>if-else</code></li> </ul> </li> <li>These two types of control structures permit the modeling of all possible   program flows</li> </ul>"},{"location":"classic_sessions/morning_lecture/#if-else-conditions","title":"<code>if-else</code> conditions","text":"<p>An <code>if</code> statement is used to define a code block that is executed if a condition evaluates to the boolean value <code>True</code>. The <code>else</code> statement is only evaluated if the <code>if</code> statements is evaluated to <code>False</code>.</p> <pre><code>In [1]: my_boolean = True\n\nIn [2]: if my_boolean is True:\n   ...:     print(\"Michael, is it True?\")\n   ...: else:\n   ...:     print(\"No\")\nMichael, is it True?\n\nIn [3]: my_boolean = False\n\nIn [4]: if my_boolean is True:\n   ...:     print(\"Michael, is it True?\")\n   ...: else:\n   ...:     print(\"No\")\nNo\n</code></pre> <p>Notice, we don't actually have to write <code>... is True</code>. As we saw before boolean operators are used to evaluate the identity of some condition. This is very commonly used together with <code>if</code> statements.</p> <pre><code>In [1]: A = \"ABCD\"\n\nIn [2]: if len(A) &lt;= 3:\n   ...:     print(\"Sequence A is smaller or equal than 3.\")\n   ...: elif len(A) &gt; 3 and len(A) &lt; 5:\n   ...:     print(\"Sequence A is greater than 3 and smaller than 5.\")\n   ...: elif len(A) == 5:\n   ...:     print(\"Sequence A is equal to 5.\")\n   ...: else:\n   ...:     print(\"Sequence A is greater than 5.\")\nSequence A is greater than 3 and smaller than 5.\n</code></pre> <p>Indentation in Python</p> <p>Control flow statements are always ended by a colon <code>:</code> and following lines to be executed within the context statement must be indented by 4 spaces (tab). Consider this program</p> <pre><code>if x &gt; 2:\n    # This print statement will only be executed if x &gt; 2\n    print(\"x larger than two\")\n\n# This will always be executed\nprint(\"I don't care about x. I'm independent and will always be executed\")\n</code></pre>"},{"location":"classic_sessions/morning_lecture/#loops-and-iteration","title":"Loops and iteration","text":"<p>Just like <code>if-else</code> statements, the idea of loops and iteration is fundamental to Python (and any programming language).</p>"},{"location":"classic_sessions/morning_lecture/#the-while-loop","title":"The <code>while</code> loop","text":"<p>The <code>while</code> loop is conceptually similar to an <code>if</code> statement, but, instead of executing the indented code block once - it's repeated as long as the statement evaluates to <code>True</code>. Can you guess when the following examples are going to stop?</p> <pre><code>while True:\n    print(\"I will not waste chalk.\")\n</code></pre> Answer <p>It will continue continue for eternity.</p> <pre><code>i = 0\nwhile i &lt; 10:\n    print(\"Hello, world!\")\n    i += 1 # Note same as i = i + 1\n</code></pre> Answer <p>It will print \"Hello, world!\" 10 times before stopping</p> <pre><code>while True:\n    if True:\n        break\n</code></pre> Answer <p>It will stop in the first iteration. The keyword <code>break</code> will break out from any loop.</p> <p>And last one...</p> v1v2 <pre><code>i = 0\nwhile i &lt; 10:\n    i += 1\n    if i &gt; 9:\n        i -= 1\n    print(f\"Number {i}\")\n</code></pre> <pre><code>i = 0\nwhile i &lt; 10:\n    if i &gt; 9:\n        i -= 1\n    i += 1\n    print(f\"Number {i}\")\n</code></pre> Answer <p>v1 goes to infinity and v2 stops after 10 iterations.</p>"},{"location":"classic_sessions/morning_lecture/#the-for-loop","title":"The <code>for</code> loop","text":"<p>The <code>for</code> loop is typically used when looping \"over\" something. Formally, a <code>for</code> loop can be used over any object that is iterable and implements a <code>iter</code> and <code>next</code> method - like a list, string, set or range. Let's look at an example by looping over the string <code>\"ABCD\"</code></p> <code>for</code> loop<code>while</code> loopLess Pythonic <code>for</code> loop <pre><code>A = \"ABCD\"\nfor c in A:\n    print(c)\n</code></pre> <pre><code>A = \"ABCD\"\ni = 0\n\nwhile i &lt; len(A):\n    print(A[i])\n    i += 1\n</code></pre> <pre><code>A = \"ABCD\"\nfor i in range(len(A)):\n    print(A[i])\n</code></pre> <p>We can also use <code>for</code> loops over lists</p> <pre><code>my_list = [3, 5, 6]\nfor n in my_list:\n    print(n)\n</code></pre> <p>and ranges defined by the builtin <code>range</code> function</p> <pre><code>for i in range(10):\n    print(i)\n</code></pre> <p>Iterables and why <code>for</code> loops sort of are <code>while</code> loops?!</p> <p>If an object is iterable - we can always create an iterator object with the <code>iter</code> function. This is what the <code>for</code> keywords does under the hood.</p> <pre><code>    In [1]: my_string = \"ABCD\"\n\n    In [2]: type(my_string)\n    Out[2]: str\n\n    In [3]: my_string_iterator = iter(\"ABCD\")\n\n    In [4]: type(my_string_iterator)\n    Out[4]: str_iterator\n\n    In [5]: next(my_string_iterator)\n    Out[5]: 'A'\n\n    In [6]: next(my_string_iterator)\n    Out[6]: 'B'\n\n    In [7]: next(my_string_iterator)\n    Out[7]: 'C'\n\n    In [8]: next(my_string_iterator)\n    Out[8]: 'D'\n\n    In [9]: next(my_string_iterator)\n    ---------------------------------------------------------------------------\n    StopIteration                             Traceback (most recent call last)\n    Cell In [9], line 1\n    ----&gt; 1 next(my_string_iterator)\n\n    StopIteration:\n</code></pre> <p>As seen from above - we can coninue calling the <code>next</code> function to get the next element of the string iterator object until the iterator is consumed. The way a <code>for</code> loop is implemented is loosely something like this</p> <pre><code>my_string_iterator = iter(\"ABCD\")\nwhile True:\n    try:\n        tmp = next(my_string_iterator)\n        print(tmp)\n    except StopIteration:\n        break\n</code></pre> <p>If you still need the index of the current iteration refrain from using the <code>range(len(seq))</code> idiom and use the <code>enumerate</code> function instead.</p> <pre><code>A = \"ABCD\"\nfor i, c in enumerate(A):\n    print(i, c)\n</code></pre> <p>Just like we nested an <code>if</code> statement into a loop before we can also nest a loop within a loop.</p> <pre><code>A = \"ACGT\"\nfor i in A:\n    for j in A:\n        for k in A:\n            print(i + j + k)\n</code></pre> <p>When should I use <code>for</code> and when should i use <code>while</code>?</p> <p>As a rule of thumb - use <code>for</code> loops when dealing with iterable objects (ranges, sequences, generators). Another way of thinking about it is, use a <code>for</code> loop when the number of iterations e.g. length of sequence is known. In other case - use a while loop (you have to).</p>"},{"location":"classic_sessions/morning_lecture/#links","title":"Links","text":"<ul> <li>YouTube video on <code>python</code> versus <code>IPython</code></li> <li>YouTube video on <code>IPython</code></li> <li>Previous content is adapted (and extended) from previous iterations of the course and   slides developed by Nina Fischer   (see slide deck one   and slide deck two).</li> </ul>"},{"location":"communication/","title":"Communication","text":"<p>Here is the communication of this course:</p> No Date Communication 1 2024-01-18 . 2 2024-08-30 . 3 2025-03-04 here"},{"location":"communication/20250304/","title":"Communication","text":"<ul> <li>Course date: 2025-03-04</li> </ul> Date Description 2025-01-10 Registration form 2025-01-10 NAISS newsletter, first announcement 2025-01-21 and onwards Welcome email 2025-02-25 and onwards Reminder email, 1 week left"},{"location":"communication/20250304/newsletter_first_announcement/","title":"NAISS newsletter, first announcement","text":"<p>This announcement is used in a newsletter</p> <p>This announcement is used in a newsletter.</p> <p>Hence, all its links must remain valid. Remove those links after the next course's iteration.</p> <p>Great course. Now, Python is not scary anymore.</p> <p>A learner from this course (source)</p> <p>This 1-day course helps you get started with Python, by working through an online and free book. We make use of HPC clusters to write and run Python code. The pace of this highly interactive course is set by the majority of learners, ensuring that any complete beginner has enough time for exercises. At the end of the day, you should feel comfortable with the basics of Python and feel familiar to a book on Python to help you on your next steps.</p> <ul> <li>Course information and registration: https://docs.uppmax.uu.se/workshops_courses/intro_to_python/</li> <li>When: Tuesday March 4th 2025, 9:00-16:00 (course schedule)</li> <li>Where: Online via Zoom</li> <li>Course material: https://uppmax.github.io/naiss_intro_python/</li> <li>Earlier evaluations of the course: https://uppmax.github.io/naiss_intro_python/evaluations/</li> </ul>"},{"location":"communication/20250304/registration_form/","title":"Registration form text","text":"<p>This text is used in the current registration form</p> <p>Intro to Python 2025-03-04</p> <p>This is the registration form for the UPPMAX course 'Intro to Python', https://docs.uppmax.uu.se/courses_workshops/intro_to_python/</p>"},{"location":"communication/20250304/registration_form/#what-is-your-email-address","title":"What is your email address?","text":"<pre><code>[field for one line of text]\n</code></pre>"},{"location":"communication/20250304/reminder_email_1_week_left/","title":"Reminder email, 1 week left","text":"<p>About this email</p> <p>This email is sent out to all learners one week in advance</p> For coordinators: progress <p>This email has been sent to all learners to and including at timestamp <code>27/02/2025 17:43:35</code></p>"},{"location":"communication/20250304/reminder_email_1_week_left/#reminder-to-intro-to-python-course-of-2025-03-04","title":"Reminder to Intro to Python course of 2025-03-04","text":"<p>Dear learners,</p> <p>Again, welcome to the 'Intro to Python' course of 2025-03-04!</p> <p>I've prepared videos on how to login and how to start Python on these HPC clusters:</p> <ul> <li>Alvis</li> <li>Bianca</li> <li>COSMOS</li> <li>Dardel</li> <li>Kebnekaise</li> <li>Rackham</li> <li>Tetralith</li> </ul> <p>If your favorite HPC cluster is missing, you are encouraged to contact me and I will happily add answers/documentation/videos for your cluster.</p> <p>If you have any questions, never hesitate to contact me.</p> <p>Please make sure you've done all your prerequisites and if yes, see you on March 4th 9:00 (sharp!) at the Zoom room below this email.</p> <p>Thanks and cheers, Rich\u00e8l Bilderbeek, NAISS 'Intro to Python' main teacher</p> <p><code>[Zoom invite text]</code></p>"},{"location":"communication/20250304/welcome_email/","title":"Welcome email","text":"<p>About this email</p> <p>This email is sent out to learners that recently registered.</p> For coordinators: progress <p>This email has been sent to all learners to and including at timestamp <code>27/02/2025 17:43:35</code></p>"},{"location":"communication/20250304/welcome_email/#welcome-to-the-intro-to-python-course-of-2025-03-04","title":"Welcome to the Intro to Python course of 2025-03-04","text":"<p>Dear learners,</p> <p>Welcome to the 'Intro to Python' course of 2025-03-04!</p> <p>Well done! You've already done one of the four prerequisites (as listed on https://uppmax.github.io/naiss_intro_python/prereqs/ ):</p> <ul> <li>[x] Prerequisite 1/4: You have registered at our registration form at here</li> <li>[ ] Prerequisite 2/4: A user account on a Swedish academic HPC cluster</li> <li>[ ] Prerequisite 3/4: Be able to login to an HPC cluster using SSH</li> <li>[ ] Prerequisite 4/4: have a good Zoom setup</li> </ul> <p>Now get ready for the hardest prerequisite: number 3. This can take multiple days, to: (1) get such a project (2) log in to that HPC cluster.</p> <p>Help, answers and videos can be found at the course's FAQ page at https://uppmax.github.io/naiss_intro_python/faq/#prerequisites .</p> <p>The course assumes:</p> <ul> <li>you can log in to an HPC cluster</li> <li>the documentation of that cluster is helpful (if not, contact your cluster's HPC center).</li> </ul> <p>If you have any questions, never hesitate to contact me.</p> <p>Please make sure you've done all your prerequisites and if yes, see you on March 4th 9:00 (sharp!) at the Zoom room below this email.</p> <p>Thanks and cheers, Rich\u00e8l Bilderbeek, NAISS 'Intro to Python' main teacher</p> <p><code>[Zoom invite text]</code></p>"},{"location":"data/","title":"Data","text":"<p>Data collected in this course</p> No Date Data 1 2024-01-18 . 2 2024-08-30 here 3 2025-03-04 here"},{"location":"data/20240830/","title":"2024-08-30","text":""},{"location":"data/20240830/#learners-in-time","title":"Learners in time","text":"<ul> <li>Data: 20240830_counts.csv</li> <li>Script: analyse_counts.R</li> </ul>"},{"location":"data/20250304/","title":"2025-03-04","text":""},{"location":"data/20250304/#registrations","title":"Registrations","text":"<p>As a learner, it can be assuring to know you have registered. Here are the registrations we've received, with an MD5 of the email address.</p> <ul> <li>Data: registrations.csv<ul> <li><code>timestamp</code>: the timestamp in <code>DD/MM/YYYY hh:mm:ss</code>   format</li> <li><code>email</code>: the MD5 hash of the email address</li> </ul> </li> </ul>"},{"location":"data/20250304/#number-of-registrations-in-time","title":"Number of registrations in time","text":"<ul> <li>Data: n_registrations_in_time.csv</li> <li>Code: plot_n_registrations_in_time.R<ul> <li><code>date</code>: the date, in <code>DD/MM/YYYY</code> format</li> <li><code>n</code>: the amount of registrations at that day</li> <li><code>cumulative</code>: the total amount of registrations   at the end of that day</li> </ul> </li> </ul>"},{"location":"data/20250304/#number-of-learners-present-in-time","title":"Number of learners present in time","text":"<ul> <li>Data: 20250304_counts.csv</li> <li>Code: analyse_counts.R</li> </ul>"},{"location":"data/20250304/#showing-up","title":"Showing up","text":""},{"location":"evaluations/","title":"Evaluations","text":"Where can I evaluate this course? <p>Go to evaluation (singular) :-)</p> <p>Here are the evaluation results of this course:</p> No Date Evaluation Success score 1 2024-01-18 here None measured 2 2024-08-30 here 86% 3 2025-03-04 here 82% <ul> <li>The 'Success score' is the average confidence the learners   have on each of the learning outcomes of the course</li> </ul> <p></p>"},{"location":"evaluations/20240118/","title":"2024 January","text":"<p>In this course's iteration, it was part of the 'UPPMAX Intro course'. Due to this, the evaluation results were directed to this course or others.</p> <p>Here, only the results that clearly applied to this course are shown. This selection may bias the evaluation results, but it is the best that could be done: the full evaluation results are only visible to the teachers of the full four-day course.</p>"},{"location":"evaluations/20240118/#anonymous-evaluations","title":"Anonymous evaluations","text":"<p>These are the anonymous evaluation results that clearly apply to me.</p> <p></p> <p></p> <p>Note that I am the only instructor that got a 2 out of 5.</p>"},{"location":"evaluations/20240118/#what-did-you-like-the-most-about-the-course","title":"What did you like the most about the course?","text":"<p>This fulfilled all of my requirements as a beginner to Uppmax and basic coding in BASH. I liked the hands-on nature of the activities, especially with Richel. Although it was intense and tiring, it forced effective learning</p> <p>This is great to hear! This was the whole idea: we know that learners prefer a passive lecture over active teaching, even though they learn less.</p>"},{"location":"evaluations/20240118/#what-did-you-like-the-least-about-the-course","title":"What did you like the least about the course?","text":"<p>At the Python section, i didn't like that we skipped some of the solutions. After trying out and failing i would like to see at least how to solve it, and we lost a lot of time on some of the easier exercises.</p> <p>I agree with the learner that at the end of the day, I started skipping things. I did so purposefully, yet I did not expect this was problematic enough to end up on an evaluation.</p> <p>Python scripts part</p> <p>Too bad that there is no reason here...</p>"},{"location":"evaluations/20240118/#how-do-you-think-we-could-improve-the-course","title":"How do you think we could improve the course?","text":"<p>more paired up exercises</p> <p>I was the only instructor that did this. I am happy at least one learner liked it :-)</p>"},{"location":"evaluations/20240118/#do-you-have-any-additional-comments-or-suggestions","title":"Do you have any additional comments or suggestions?","text":"<p>I liked the course overall, however Python may need its own course, because it couldn't cover much because of short time, and the exercises skipped from basic stuff to intermediate pretty quick at least for me as a person who didn't work with python before.</p> <p>I wonder where that quick skip from basic to intermediate happened. I'd guess at file IO, which indeed is a jump from book chapter 3 to chapter 13. Next time, I should invest some time in bridging this gap.</p> <p>For the Python session in the last day, we got a lot of practice time but time was much behind the schedule. I was also stuck with some errors. I suggest intead of only two students in a break room, assign more students in a room and the questions are likely be solved. Teacher show also provide correct answers after practice.</p> <p>This is a new insight, that if a course is learner-centered (i.e. the pace is determined by the learners) and the schedule is not completed, this may give a negative effect. I will reshape the schedule to help learners get the opposite effect.</p> <p>I am unsure about using more than two learners: in the end, learners that have finished an exercise were sent to help, hence rooms would fill up to three or four learners.</p> <p>Indeed, here too, in the end I cut corners in not showing the answers on purpose. It is a more sensitive matter than I thought :-)</p>"},{"location":"evaluations/20240118/#informal-evaluations","title":"Informal evaluations","text":"<p>This evaluations had the form of an informal dialogue.</p> <ul> <li>From 1 learner</li> </ul> <p>I had some questions, for example 'What is the interactive node going to do with my output?'. It is great that we practiced this!</p> <p>If no video, the teacher cannot see when learners are lost: great idea to turn cameras on for that too!</p> <ul> <li>lovely</li> <li>fresh</li> <li>kept audience awake</li> <li>As a learner, you do not want to be berated when giving an answer.   Richel tries to gently deal with a wrong answer and he does this great</li> <li>cameras on is great: else learners feel alone</li> <li>in a gentle way, Richel makes people feel that this is serious:   there is a schedule, there are exercises and we are going to do it!</li> <li>breaks are great: two hours, 1.5 hours is tough!</li> <li>interrupting an exercise for a break is fine</li> </ul>"},{"location":"evaluations/20240830/","title":"Evaluation","text":"<ul> <li>average_confidences.csv</li> <li>success_score.txt: 86%</li> </ul>"},{"location":"evaluations/20240830/#anonymous-feedback","title":"Anonymous feedback","text":"<p>From anonymous_feedback.txt:</p> <p>Loved the organisation, very well prepared course! Richel is the best.</p>"},{"location":"evaluations/20240830/#survey-feedback","title":"Survey feedback","text":"<p>From survey_feedback.txt:</p> <ul> <li>Great course. Now, Python is not scary anymore.</li> <li>Thanks for the class today! It was very well organized and I really   appreciated your energy. I feel like maybe some things were a little basic   for me and I wish we had gotten into the more advanced stuff at the end.   But this really reinforced the basics for me and I'm still glad that I did it.</li> <li>Thank you for creating very interactive [class] room</li> <li>I liked Ri-kjells teaching style!</li> </ul>"},{"location":"evaluations/20240830/#scores","title":"Scores","text":""},{"location":"evaluations/20250304/","title":"Evaluation 2025-03-04","text":""},{"location":"evaluations/20250304/#results","title":"Results","text":"<ul> <li>anonymous_evaluations.txt</li> <li>survey.csv</li> <li>survey_text_question.txt</li> <li>email.txt</li> <li>success_score.txt: 82%</li> </ul>"},{"location":"evaluations/20250304/#analysis","title":"Analysis","text":"<ul> <li>script used: analyse.R</li> <li>average_confidences.csv</li> <li>success_score.txt</li> </ul>"},{"location":"lesson_plans/","title":"Lesson plans","text":"<p>Here are the lesson plans of this course:</p> No Date Lesson plan 1 2024-01-18 here 2 2024-08-30 here 3 2025-03-04 here","tags":["lesson plans"]},{"location":"lesson_plans/20240118/","title":"Lesson plan","text":"<ul> <li>Intro to Python, day 4 of the 'Intro to UPPMAX' course</li> <li>Teacher: Richel</li> <li>Day: Thursday 2024-01-18</li> </ul> <p>Teaching goals:</p> <ul> <li>Learners have used the UPPMAX documentation</li> <li>Learners have used a free and online book they can use for future reference</li> <li>Learners have loaded Python using the module system</li> <li>Learners have used the Python interpreter</li> <li>Learners have used command-line arguments as input</li> <li>Learners have read a file</li> <li>Learners have written to a file</li> <li>Learners have created a plot, e.g. a scatter plot</li> <li>Learners feel that Python is something they can do</li> <li>Learners work in small groups</li> <li>Learners have enough breaks</li> <li>Practice to use the fundamental teaching cycle (as discussed in   Mike Bell's 'The Fundamentals of Teaching': (1) prior knowledge,    (2) presentation, (3) challenge, (4) feedback, (5) repetition</li> </ul> <p>Non-goals:</p> <ul> <li>Discuss as many Python concepts as possible,   instead follow the group's pace</li> <li>Stick to the schedule about Python theory,   instead follow the group's pace</li> <li>Practice Python theory enough to master it,   instead follow the group's pace</li> <li>Tailor to advanced Python developers,   instead follow the beginners' pace   and let the more advanced learners help</li> <li>Teach best practices,   instead show those best practices</li> <li>Use teaching materials developed by colleagues just to be nice.   Instead, use free-online teaching materials developed by others,   so that me and my colleagues do not need to maintain it</li> </ul> <p>Negative feedback that I will enjoy and not respond to:</p> <ul> <li>'The course goes too slow': this is an introduction, aimed at beginners.   The more advanced learners inevitably will find it go too slow.</li> <li>'Lectures are too short' or 'The contents should be taught':   strategic learners will prefer passive listening   over active teaching methods. Although listening is an activity that   strategic learners appreciate,   it has a too small effect for transferring knowledge.   I will not feel sorry for putting my learners to work :-)</li> <li>'Go more in-depth': this is an introduction, aimed at beginners,   so I cover the basics and we get stuff to run. I will go as deep as time   permits me.</li> <li>'Breaks interrupt the flow': I agree it does. Still, breaks are   important. And if you feel interrupted in a flow, it is nice to feel   you like to continue</li> </ul> <p>Negative feedback that I will respond to:</p> <ul> <li>'The course goes too fast': this is an introduction, aimed at beginners.   If even the beginners need more time, I must slow down</li> </ul> <p>Negative feedback that I will not enjoy and not respond to:</p> <ul> <li>'Chaotic': this is nonsense. Judging by the preparation, its is a   well-prepared student-paced day.</li> <li>'We want regular lectures'. I practice what the literature tells me   what is most effective. I won't feel bad for doing what I   is most/more effective</li> </ul>"},{"location":"lesson_plans/20240118/#schedule","title":"Schedule","text":"Time Topic 09:00-10:00 Using the Python interpreter, the way of the program 10:00-10:15 Break 10:15-11:00 Working with Python scripts, variables 11:00-11:15 Break 11:15-12:00 operators, user input 12:00-13:00 Lunch 13:00-14:00 UPPMAX modules and Python packages 14:00-14:15 Break 14:15-15:00 File IO, command line arguments 15:00-15:15 Break 15:15-16:00 Graphics, functions"},{"location":"lesson_plans/20240830/","title":"Lesson plan","text":"<p>I've already taught using this material once. The lesson plans are in the top of the material of each session, hence no need to write it here.</p> <p>I will use the same exercise procedure as here, but for groups of 3, as this worked well on Day 1.</p>"},{"location":"lesson_plans/20250304/","title":"2025-03-04","text":""},{"location":"lesson_plans/20250304/#2025-01-13","title":"2025-01-13","text":"<p>The course was widened in scope from UPPMAX-only to NAISS-wide, two hours before a newsletter needed to be sent out. I prepared the text for a newsletter, assuming I will get the course material in shape later.</p> <p>First I will get the website into good shape, before transitioning the content to be NAISS-wide. Done! Version 2.3.1 builds cleanly!</p> <p>One drawback of being NAISS-wide is that UPPMAX (as far as I can see) has the only user documentation suitable for teaching. I will be ruthless when needed, and add things to the UPPMAX doc.</p> <p>Another drawback of being NAISS-wide is that the evaluation question 'I am comfortable using my HPC center's documentation' will vary per center. It is part of the course to use other center's documentation, I will encourage our learners to give feedback regarding other center's documentation.</p> <ul> <li>[x] Add to the evaluation:   'If you think the documentation of your HPC cluster should be improved,   write down its name here'</li> </ul> <p>Going NAISS-wide will make me remove 'I can start an interactive session on my HPC cluster' as not all NAISS clusters have this. If they have it, they differ. This course is about learning Python and less on HPC clusters</p> <ul> <li>[x] Remove interactive session</li> </ul>"},{"location":"lesson_plans/20250304/#2025-01-21","title":"2025-01-21","text":"<p>The newsletter was rushed and I only know the constraints I've asked for. This makes it hard to write a 'Welcome to the course' email, as too many things may change in the very near future.</p> <p>At the end of the day, I decided to write an email with whatever I knew to the learners.</p>"},{"location":"lesson_plans/20250304/#2025-02-18","title":"2025-02-18","text":"<p>The number of registrations passed 60, hence I asked Bj\u00f6rn Claremar for help. I expect a third to show up, which is 20 learners. Putting these in breakout rooms of 3 learners is 7 breakout rooms. I think 5 breakout rooms per teacher is reasonable. I have the exercise procedure well documented for any helper, so that anyone can understand what is expected of him/her.</p>"},{"location":"lesson_plans/20250304/#2025-02-24","title":"2025-02-24","text":"<p>The 'Working with Python scripts' seems redundant to me. I will need to double-check before I delete it. On the other hand, it seems like a good practice ...</p>"},{"location":"lesson_plans/20250304/#2025-02-26","title":"2025-02-26","text":"<p>I decided to keep the 'Working with Python scripts' and I explain the reason at its page.</p> <p>I sent all learners the '1 week left' reminder and asked if there were more HPC clusters that I should discuss. Out of around 63 learners, 2 responded and hoped me to add the Vera HPC cluster. As I cannot request access myself, I asked to get access to one of their Vera projects, or else to give them access to my Alvis project. Both learners accepted to use my Alvis project.</p> <p>Remember for next time:</p> <ul> <li>[/] List the clusters supported by this course. These are:   Alvis, Bianca, COSMOS, Dardel, Kebnekaise, Rackham, Tetralith</li> </ul> <p>Remember for next time:</p> <ul> <li>[x] Also publish the date when registration closes</li> </ul>"},{"location":"lesson_plans/20250304/#2025-03-03","title":"2025-03-03","text":"<p>I had emails from two learners that had trouble preparing for the course.</p> <p>One learner got this text from NSC:</p> <p>Perhaps there has been some misunderstanding - are you participating in a \"Introduction to python\" course (e.g. https://www.naiss.se/event/introduction-to-python/). If so, the course organizers have the responsibility of requesting NAISS resources. You can strike the proposal in this case. If you are planning to run a python course yourself, we need more information to grant your application. Note, for NAISS to accept applications for courses they must be at the PhD level. We also need to know (or have an estimate) of the number of participants, the dates and duration of the course and some information on the content/softwares to be used and a justification for the amount of resources requested.</p> <p>I added the learner to my project. From this, I now understand that I need to prepare the resources for my courses. Luckily, I already did so :-)</p> <p>This does mean I need to change the registration form.</p> <ul> <li>[x] Update registration form and let learners pick an HPC cluster,   so I can add them to my projects</li> </ul> <p>I've closed the registration form.</p> <p>The text was:</p> <p>This is the registration form for the NAISS course 'Intro to Python', https://docs.uppmax.uu.se/courses_workshops/intro_to_python/ .</p> <p>I have added these lines:</p> <p>Registration is closed.</p> <p>However, if you are already comfortable using a NAISS HPC cluster, you are still welcome, as you can still fulfill the prerequisites at https://uppmax.github.io/naiss_intro_python/prereqs/ in time. Contact [my email] and he will happily give you the course details :-)</p> <p>So, for tomorrow, do:</p> <ul> <li>[x] Decide upon teaching form</li> <li>[x] Create an overview of how hard exercises   are for the different HPC clusters</li> </ul> <p>Teaching form:</p> <ul> <li>Use rooms called after the HPC clusters first. Keep these   rooms until all have logged in<ul> <li>[x] Check how easy this is to do in Zoom<ul> <li>This needs to be done by hand. Hence, use a table instead</li> </ul> </li> </ul> </li> <li>Randomly shuffle people when we start doing 'regular Python'</li> </ul> <p>With that, I think I am ready to go!</p>"},{"location":"misc/exercise_procedure/","title":"Exercise procedure","text":"For teachers: why this setup? <p>Ideally, both learners have a camera and microphone on</p> <p>This allows for a learning environment that is engaging and where discussion can take place easily.</p> <p>You will be put into Zoom Breakout rooms, in random pairs.</p> <p>This assures everyone learns effectively: pairs are optimal.</p> <p>Ideally, all do the exercises on their computer, yet derive at a shared answer</p> <p>This assures everyone can give a answer that is not personal.</p> <p>One should commonly share screens</p> <p>Encourage teaching and learning.</p> <p>There is no silent room.</p> <p>There is no silent room, as:</p> <ul> <li>(1) working in pairs allows 'Think, Pair, Share' to work;   answering is not personal anymore,</li> <li>(2) getting the experienced learners to teach makes them learn too,</li> <li>(3) this does not work well with Zoom assigning random pairs,</li> <li>(4) this is not designed to be a self-study course</li> </ul> <p>When done with the exercises, go back to the main room</p> <p>This helps set the pace of the course.</p> <p>Learners that are done will be asked to try to help the remaining working learners, by joining their breakout rooms</p> <p>This helps wisdom to spread.</p> <p>The majority of learners is keen to help out directly.</p> <p>The majority of the remaining learners feel not knowledgeable enough to help out, but is keen to try to help out. Remind these learners they are here to learn, and not to already know to content.</p> <p>When two-thirds of the learners are in the main room, all break-out rooms will be closed ruthlessly</p> <p>The parameter value two-thirds is picked as it means that most learners have arrived at the answer. The hope is that the members of a slower pair in one iteration will catch up when paired up with other learners.</p> <p>Closing breakout rooms is not ultra-ruthless: learners still have 1 minute left. But it is a simple and ruthless rule.</p> <p>Breaks are always on the scheduled time. You will be reminded in that chat</p> <p>Breaks are important.</p> <p>Take that break, either in the main room or in your breakout room. The breakout rooms will not be closed</p> <p>Do not disrupt the flow (even more) by closing the breakout rooms.</p> <p>In the main room, random learners will be asked questions regarding those exercises. Say the answer you agreed upon as a group (i.e. not your personal answer!)</p> <p>This is form is described as 'Think, Pair, Share' in 'The Fundamentals of Teaching' by Mike Bell</p> For teachers: breakout room visit policy <p>The goal of visiting the breakout room, is to ensure there is a learning environment. Try to disturb as little as possible. Avoid to lecture and avoid to correct the learners, as this will make their learning less efficient.</p> <p>If learners are asking a question, coach the learners in finding the answer. Avoid giving a direct answer, as this will make their learning less efficient.</p> <pre><code>flowchart TD\n  question_asked[Learners ask a question?]\n  maybe_answer[Reply, maybe answer the question]\n  how_many_cameras[How many camaras are on?]\n  concentrated[Do the learners appear concentrated?]\n  discussion[Are the learners having a useful discussion?]\n  arguing[Are the learners arguing?]\n  chatting[Are the learners chatting informally?]\n  huh[Then what are they doing?]\n\n  fix[Re-establish learning environment]\n  next[Go to the next breakout room]\n\n  question_asked --&gt; |Yes| maybe_answer\n  question_asked --&gt; |No| how_many_cameras\n  maybe_answer --&gt; |Done| how_many_cameras\n  how_many_cameras --&gt; |Zero or one| next\n  how_many_cameras --&gt; |Two| concentrated\n  concentrated --&gt; |Yes| next\n  concentrated --&gt; |No| discussion\n  discussion --&gt; |Yes| next\n  discussion --&gt; |No| arguing\n  arguing --&gt; |Yes| fix\n  arguing --&gt; |No| chatting\n  chatting --&gt; |Yes| fix\n  chatting --&gt; |No| huh\n  fix --&gt; |Done| next</code></pre> <ul> <li>Ideally, both learners have a camera and microphone on</li> <li>You will be put into Zoom Breakout rooms, in random pairs.</li> <li>There is no silent room.</li> <li>Ideally, all do the exercises on their own computer,   yet derive at a shared answer</li> <li>One should commonly share screens</li> <li>Stuck? You can (1) wait for a teacher to come by,   (2) click on the Zoom option 'Ask for help', or   (3) go to the main room</li> <li>When done with the exercises, go back to the main room</li> <li>Learners that are done will be asked to try to help   the remaining working learners,   by joining their breakout rooms</li> <li>When two-thirds of the learners are in the main room, all break-out rooms   will be closed ruthlessly.   It may take 1 minute before the room closes though :-)</li> <li>Breaks are always on the scheduled time. You will be reminded in that chat</li> <li>Take that break, either in the main room or in your breakout room.   The breakout rooms will not be closed</li> <li>In the main room, random learners will be asked questions   regarding those exercises.   Say the answer you agreed upon as a group (i.e. not your personal answer!)</li> </ul> <pre><code>flowchart TD\n  subgraph breakout_room[Your initial breakout room]\n    do_exercise[Do exercises in group]\n    stuck[Wait\\nAsk for help\\nGo the main room]\n    do_exercise &lt;--&gt; |Stuck?| stuck\n  end\n  subgraph main_room[Main room]\n    get_exercise[Get exercises]\n    done_exercise[Done exercises]\n    most_done_exercise[Most have done exercises]\n    closing_breakout_rooms[Closing breakout rooms]\n    feedback[Feedback]\n  end\n  subgraph other_breakout_room[Another breakout room]\n    help_do_exercise[Help do exercises in group]\n  end\n\n  get_exercise --&gt; |clear?| do_exercise\n  do_exercise --&gt; |done!| done_exercise\n  do_exercise --&gt; |breakout rooms close| feedback\n  done_exercise --&gt; |help out| help_do_exercise\n  done_exercise --&gt; |wait| most_done_exercise\n  help_do_exercise --&gt; |done!| done_exercise\n  help_do_exercise --&gt; |breakout rooms close| feedback\n  most_done_exercise --&gt; |many learners in main room| closing_breakout_rooms\n  closing_breakout_rooms --&gt; feedback\n\n  breakout_room ~~~ main_room ~~~ other_breakout_room\n\n  get_exercise ~~~ help_do_exercise\n  do_exercise ~~~ help_do_exercise\n  help_do_exercise ~~~ most_done_exercise</code></pre> <p>Overview of the exercise procedure</p>"},{"location":"misc/exercise_procedure/#questions","title":"Questions","text":"<ul> <li>You are in a breakout room with someone else.   You both do not know what to do.   What went wrong?</li> </ul> Answer <p>Before you are sent to the breakout rooms, it is asked if you know what to do, with the goal of preventing this situation.</p> <p>Try to help the teacher give clear enough instructions next time.</p> <ul> <li>You are in a breakout room with someone else.   You need to install a piece of software,   which takes a couple of minutes of time.   Will you still have enough time for the exercises?</li> </ul> Answer <p>Likely: yes, you will have enough time for the exercises.</p> <p>It is likely you are not the only one that has this problem. The course follows the pace of the learners, hence, we move on to the next session when most learners have finished the exercises</p> <ul> <li>You finished the exercise and are in the main room,   waiting for the course to move on.   You were asked to help in another breakout room,   yet you did not feel comfortable to do so.   What do you do?</li> </ul> Answer <p>These are your options:</p> <ul> <li>Wait</li> <li>Ask questions</li> <li>Read the next session.   Turn of your camera to indicate you need to concentrate</li> </ul> <ul> <li>I am alone in my Zoom breakout room. What do I do?</li> </ul> Answer <p>It is likely a teacher will quickly see this and ruthlessly move you to another breakout room, so waiting is an option.</p> <p>Else, go to the main room.</p>"},{"location":"misc/project/","title":"Project","text":"<p>This is the NAISS code for the UPPMAX project of this course:</p> <pre><code>naiss2024-22-49\n</code></pre>"},{"location":"misc/richel/","title":"Rich\u00e8l","text":"<p>See Rich\u00e8l's name's pronunciation and teaching style here.</p>"},{"location":"overviews/schedule/","title":"Schedule","text":"<p>The schedule can be found here.</p> Why does this page exist? <p>Because its URL was published in a newsletter.</p>"},{"location":"prereqs/","title":"Prerequisites","text":"<p>Before the course, you must have done these four things:</p> <ul> <li>Prerequisite 1/4: You have registered at our registration form at here</li> <li>Prerequisite 2/4: A user account on a Swedish academic HPC cluster</li> <li>Prerequisite 3/4: Be able to login to an HPC cluster using SSH</li> <li>Prerequisite 4/4: have a good Zoom setup</li> </ul> Any questions about this? <ul> <li>See the 'Prerequisites' section of the Frequently Asked Questions page</li> </ul> How can I check this? <ul> <li>See the 'Prerequisites' section of the Frequently Asked Questions page</li> </ul> What if I have another question? <ul> <li>See the Frequently Asked Questions section</li> </ul>","tags":["prerequisites","requirements","preparation"]},{"location":"reflections/","title":"Reflections","text":"<p>Here are the reflections of this course:</p> No Date Reflection 1 2024-01-18 here 2 2024-08-30 here 3 2025-03-04 here"},{"location":"reflections/20240118/","title":"Reflection","text":"<ul> <li>Date of teaching: 2023-01-18</li> <li>Reflection date: 2023-01-18</li> <li>Teacher: Richel</li> </ul>"},{"location":"reflections/20240118/#before-the-lesson","title":"Before the lesson","text":"<p>At the day of teaching, I was quite happy with my preparation: I put the book I used into teaching cycles of about a half or an hour.</p> <p>I was, however, quite nervous:</p> <p>fear for resistance against non-lecturing: from another course, I've seen that some learners expect a stock-standard course of lectures and exercises and will turn against me when I follow the best practices of the literature instead.</p> <p>fear for resistance against student-centered teaching: I felt that following the pace of the learners is The Right Thing To Do: if they work reasonably efficient, I should assume that the exercises made per time unit to be at their pace. However, would that feel too slow?</p> <p>fear for being underprepared for another course: I was in the process of preparing for another course, of which I -at the time of teaching- had 1 day left to prepare. I had a hard time falling asleep, which was not helpful.</p> <p>However, the evening before the lesson, I checked the literature if I would be able to defend the choices I made. Yes, I did.</p> <p>I was reading an edited volume on teaching and chapter 3 was called 'Building rapport'. One of the tips was to talk about yourself and your teaching style. I don't like to talk about myself (as knowledge about me is not part of the course), but I decided to try this out and made a presentation (see A1 for the content).</p>"},{"location":"reflections/20240118/#during-the-lesson","title":"During the lesson","text":"<p>I was in the Zoom room at around 8:30, which is 30 minutes on time. I tried to make some contact with the learners, without success. My day of teaching is the fourth of a series of lessons and I felt the learners asymptotically approached coming in at 8:59 at each successive day.</p> <p>I started at 9:00 sharp. I took the time for the learners to turn on a camera. I told the learners how I will behave differently with a camera on or off.</p> <p>I lectured the presentation about myself, which is the least important thing of the course, so some learners could connect their camera. About 80%-95% of around 33 learners had a camera on after finishing the presentation.</p> <p>I started the first teaching cycle: 'What do you think about when you think about Python?', were I randomly asked learners. They knew I would, as that was in the presentation about me already. I took care to bend most answers that show a learner is not perfect into something more mild.</p> <p>I took time to discuss the workflow of how to do an exercise in pairs. My favorite part in theory was the way I would determine to move to a next exercise: (1) all learners start in pairs, (2) when a pair is done, they go to the main room, after which they are distributed over other rooms, (3) when two thirds of the students is in the main room, I close the Breakout rooms ruthlessly: (a) the remaining pairs have another minutes left, (b) the remainders are likely to catch up in the next cycle. (4) when all learners are back, ask answers to individual students and give feedback on those answers.</p> <p>The Feedback phase felt slow to me: I asked one learner per question, asked him/her to share the screen and try to do reproduce the answer again. Still, I knew 'Feedback' is the 10th most impactful intervention, which made me follow the plan.</p> <p>After the Feedback, I usually connected what we just learned to earlier knowledge again, using concept maps and repeat concepts. Also here: I know this is important to do.</p> <p>While the learners did their exercises, there was a lot of waiting for me. I needed to be in the main room, so I could move people around: sometimes, people would not go to a breakout room (for example, because they were not behind a computer at that time) or had a computer reboot or had multiple logins (e.g. a computer to share screen and a phone to share camera). Also, I sent the helpers to go through the rooms, due to which I had even less to do. It was quite dull for me. I did not want to do something else, to maintain focus.</p> <p>I commonly, but not always, instructed the helpers to do something like this: 'Go through rooms x to y to observe (1) the atmosphere of the room, (2) if the learners know what to do. Do not lecture the learners'. I am unsure if all helpers understood and I cannot check that either. Maybe next time ask:</p> <ul> <li>Q: What is the purpose of visiting the breakout rooms?</li> <li>A: To check if the learners can work and do so in a welcoming way</li> <li>Q: If, in a breakout room, the learners appear to be concentrated,   what do you do?</li> <li>A: Do not disturb and move to the next breakout room:   you've seen they can work</li> <li>Q: If, in a breakout room, two learners are discussing something.   They, however, have reached a wrong conclusion. What do you do?</li> <li>A: Do not disturb and move to the next breakout room:   you've seen they can work</li> <li>Q: If, in a breakout room, two learners have an unfriendly argument,   what do you do?</li> <li>A: Do something about this. This is up to you.   Either handle this yourself or ask me to take care of it. Always let me know</li> <li>Q: If, in a breakout room, two learners are discussing Pokemon,   what do you do?</li> <li>A: Do something about this to set them back to work in a friendly way</li> <li>Q: If, in a breakout room, only one learner has no camera, what do you do?</li> <li>A: Do not disturb and move to the next breakout room:   you have no evidence they cannot work</li> <li>Q: If, in a breakout room, both learners have no camera, what do you do?</li> <li>A: Do not disturb and move to the next breakout room:   you have no evidence they cannot work</li> <li>Q: If, in a breakout room, one or both learners ask a question to you.   What do you do?</li> <li>A: Determine if you should answer: have they discussed together already?   If yes, help them arrive at finding the right answer.   Only give a direct answer as a last option</li> </ul> <p>While the learners did their exercises, twice I went through all the breakout rooms anyways. I felt blind and the need to sample at least once or twice. I took care to go in each room with a neutral expression, say nothing, and leave with a visible thumbs up. Only rarely did I get questions. The questions were relevant to fix. I've seen mostly learners that were reading/programming in deep focus, or sharing a screen and talking.</p> <p>I followed the break schedule loyally, even when a break happened in the middle of an exercise. I already stated to the learners I would do that, as breaks are important.</p> <p>During the day, we did around 5 teaching cycles.</p> <p>I shortened the Challenge (i.e. exercise) about find the right UPPMAX module for a Python package: it is hard to get right and is more UPPMAX than Python (and Python is at the focus of this day). I told the learners why and showed them the YouTube video and encouraged them to watch it later: I wanted to move on to the next session.</p> <p>There was some dead space when 10 learners where in the main room, when all groups already have 1 extra helper, waiting for a remaining trio to finish. I told I would not to discuss the answer yet, but am open to any other questions. Some learners had some Python or UPPMAX questions, sometimes I asked for feedback about the book and its exercises.</p> <p>At 15:55 I interrupted the last cycle to repeat what we did and look at the course material that is also there. In the last minute, I thanked the group for being great to work with.</p> <p>At 16:00 sharp the learners left and I had a meeting with one of them: he is involved in teaching and I wanted to discuss teaching as colleagues. He stayed, Pavlin stayed too and we discussed teaching and mostly got feedback (see A2 below). Pavlin discovered that Zoom's random shuffle algorithm puts people with cameras in the first rooms! He discovered that due to this, there is a huge difference between the atmosphere in room 1 and 16: room 1 was the most fun, room 16 was colder. Pavlin felt the learners were having fun and being productive at the same time.</p> <p>At around 16:15 the day was over.</p> <p>I think the day was efficient and I feel most of the credits must go to the cooperative learners. On the other hand, I did plan to make it likely to get them to cooperate :-)</p>"},{"location":"reflections/20240118/#possible-improvements","title":"Possible improvements","text":"<p>[DONE] Split up the exercises for the block 'Variables, expressions and statement' in different pages: I intended to cut that up in three teaching cycles, as can be seen in the schedule. However, this ended up in one, because the exercises for these three cycles were on the one same page. I will split that up in three pages for next time.</p> <p>Learners will heavily depend on a camera. Consider making this more explicit in the advertising of the course. Also: encourage camera usage in earlier days of the course.</p> <p>Consider being more clear to helpers what is the idea behind the lesson setup: they are likely to expect classic lecturing. Make a flow-chart on what to do in a group room.</p>"},{"location":"reflections/20240118/#future","title":"Future","text":"<p>I hope next iteration, I am allowed to teach this course again with the same setup, to build up confidence in the positive effect of the setup.</p>"},{"location":"reflections/20240118/#appendix","title":"Appendix","text":""},{"location":"reflections/20240118/#a1-presentation-about-myself","title":"A1. Presentation about myself","text":"<pre><code># Who is Rich\u00e8l?\n\n&lt;https://github.com/UPPMAX/naiss_intro_python/tree/main/lesson_plans/20240118&gt;\n![](CC-BY-NC-SA.png)\n\n## How to pronounce my name\n\nLanguage  | Pronounciation \n----------|----------------\n**Dutch** | 'Rie-sjel'     \nEnglish   | 'Rea-shell'    \nFrench    | 'Rich\u00e8l'       \nGerman    | 'Ri-sh\u00e4ll'     \nSwedish   | 'Ri-kjell'     \n\n## Teaching\n\n-   2007-2008 MSc: Teaching in Pre-higher education in Biology\n-   Oct 2008-Aug 2010: 0.6 FTE teacher and team leader, 12-18 yo\n-   Jan 2014-Jan 2021: coordinator of multiple courses, as volunteer, 8-18 yo\n-   Sep 2022-now: coordinator of multiple courses, as volunteer, 8-18 yo\n-   Sep 2019-now: team leader of programming team, 13-38 yo\n-   Mar 2023-now: teacher at UPPMAX, 18-88 yo\n\n## Teaching style\n\n-   Literate\n-   Evidence-based, e.g. @hattie2012visible, @schwartz2012evidence\n-   Active learning\n-   Learning community\n-   Well-prepared\n-   Student-centered\n-   Transparent\n\n## Features\n\n-   Every learner needs to be active\n-   Follows the pace of learners that need more time \n-   Fast learners help\n-   Asks learners randomly @bell2020fundamentals\n-   Dare to try out new things (and fail in plain sight) @bell2020fundamentals\n\n## Lecturing\n\nI only do this for unimportant topics.\n\nThis was the only lecture in the course :-)\n\n(I **do** need to tell about myself @schwartz2012evidence)\n</code></pre>"},{"location":"reflections/20240118/#a2-feedback","title":"A2. Feedback","text":"<pre><code>I had some questions, for example 'What is the interactive node \ngoing to do with my output?'. It is great that we practiced this!\n\nIf no video, the teacher cannot see when learners are lost:\ngreat idea to turn cameras on for that too!\n\n - Day 1: \n    - Should be more hands-on\n    - Low tempo \n    - More conceptual than technical\n    - Move some Day 2 content to Day 1, to be more hands-on\n - Day 2: \n    - Great! \n    - Prefer less in-depth\n    - If no experience with Linux, it is hard to keep up.\n - Day 3: \n   - Douglas: see Day 2\n   - Diana: \n     - Good day, yet the focus was more on Linux,\n       then making the learners think and be active learners.\n     - Less content, e.g only Slurms things that are most important, less Linux flags\n - Day 4:\n   - lovely\n   - fresh\n   - kept audience awake\n   - As a learner, you do not want to be berated when giving an answer. \n     Richel tries to gently deal with a wrong answer and he does this great\n   - cameras on is great: else learners feel alone\n   - in a gentle way, Richel makes people feel that this is serious:\n     there is a schedule, there are exercises and we are going to do it!\n   - breaks are great: two hours, 1.5 hours is tough!\n   - interrupting an exercise for a break is fine\n</code></pre>"},{"location":"reflections/20240830/","title":"Reflection","text":"<ul> <li>The learners were nearly twice as fast than the cohort of 2024-01-18:</li> </ul> Time Start of section 09:30 1. Use the Python script' 09:50 2. Way of the program' 10:15 3. Working with Python scripts' 10:45 4. VET 1: variables 11:30 5. VET 2: operators 13:15 6. VET 3: user input 13:45 7. Hello little turtle 14:30 8. File I/O ? 9. Command-line arguments ? 10. Graphics ? Functions -&gt; no, send home! <p>This makes me wonder: can I stop earlier with them?</p> <ul> <li>Pro: reward for working hard</li> <li>Con: they expect a full day of work, I can give them a learning   environment the full day</li> </ul> <p>I feel that functions can be skipped, as there we leave the domain of an intro course.</p> <ul> <li>[x] Weak prior of exercise VET 2: operators<ul> <li>[x] Add better ones to course material</li> <li>[x] I already did so, I just forgot to <code>git push</code></li> </ul> </li> <li>I feel there are too much splits in the sessions.   Should I clump those together yes/no?   Let's see if this comes up at the evaluation!</li> </ul> <p>I made the learners start evaluating at 15:15, as I saw they could not learn effectively anymore. I think that this shows I've made the (lack of even more) learning visible.</p>"},{"location":"reflections/20250304/","title":"Reflection","text":"<ul> <li>Lesson plan</li> <li>Evaluation results</li> </ul>"},{"location":"reflections/20250304/#schedule","title":"Schedule","text":"Time Topic 09:00-10:00 Using the Python interpreter 10:00-10:15 Break 10:15-11:00 The way of the program 11:00-11:15 Break 11:15-12:00 Working with Python scripts 12:00-13:00 Break 13:00-14:00 Variables, expressions and statements: variables 14:00-14:15 Break 14:15-15:00 Variables, expressions and statements: operators 15:00-15:15 Break 15:15-15:45 Variables, expressions and statements: user input 15:45-16:00 Evaluation <ul> <li>[NO] Modules and Python packages</li> <li>File IO</li> <li>[NO] Command line arguments</li> <li>[NO] Graphics</li> <li>[NO] Functions</li> </ul>"},{"location":"reflections/20250304/#reflection-before-looking-at-evaluation-results","title":"Reflection before looking at evaluation results","text":"<p>The day went reasonably well, with some sloppinesses:</p> <ul> <li>Forgot to tell what to do when done</li> </ul> <p>Even though I thought I prepared well, this is work needed:</p> <ul> <li>Make 'Modules and Python packages'   NAISS wide</li> <li>Improve 'Command line arguments'</li> <li>Improve 'Graphics'</li> <li>Improve 'Functions'</li> </ul> <p>These sessions should be merged:</p> <ul> <li>Merge 'The way of the program'   and 'Working with Python scripts'</li> <li>Merge 'Variables, expressions and statements: operators'   and 'Variables, expressions and statements: user input'</li> </ul> <p>This day, I was helped by a colleague. This seemed useful in the first hour, as there were many unknowns. At the first break, however, the dust had already settled and I let the colleague go back to work again.</p> <p>Half of the registered learners showed up</p> <p>There were 63 registrations, of which 2 are cancellations done by email. In the first hour, there were 32 learners, hence around 50% of the registrations showed up.</p> <p>Half of the learners showing up had access to a NAISS cluster</p> <p>In the first hour, a third of the learners dropped out: they had no access to a NAISS cluster after all. From the remaining learners, around 8 out of around 24 had no access either, yet used a local Python instead. This means that 1/3 + (1/4 * 2/3) = 50% did not have access to a NAISS cluster.</p> <p>Due to the sloppy course material ('It is not worth your time'), I started the evaluation at 14:45 already and at 15:10 all learners were gone. I think this is the right reaction and next time, I will make sure the rest of the course material is at the same level of quality. No idea how I missed that!</p> <p>I think the Mermaid graphs are more in the way, as opposed to being helpful. Remove these</p> <ul> <li>[ ] Remove the mermaid plots</li> </ul> <p>I enjoyed working with the group. I was surprised again, how eager most learners are when helping each other.</p> <p>I'd rate this day a narrow pass: the teaching itself was reasonable, yet the course materials were not ready.</p>"},{"location":"reflections/20250304/#after-evaluations","title":"After evaluations","text":"<p>Let's look for the weakest session:</p> question mean reflection I am comfortable using the Python book 4.2667 . I am comfortable using the documentation of my HPC center 4 . I can convert a simple equation to Python code 4.2667 . I can convert a simple text question to Python code 4.066 . I can create a Python script 4.33 . I can load a Python version on my HPC cluster 4.33 . I can login to my HPC cluster 4.4667 . I can run a Python script 4.4 . I can use a text editor on my HPC cluster 4.2667 . In Python, I can ask a user for input 3.93 . In Python, I can create a file 3.93 . In Python, I can create a variable 4.53 . In Python, I can find and use the operator for exponentiation 4.53 . In Python, I can use a variable 4.53 . In Python, I know what the modulo operator is and when to use it 4.2 . In Python, I can read a file 3.8 . In Python, I can use user input in a calculation 3.8 . I can describe what the Python programming language is 3.8 . I am comfortable learning Python 3.8 This is my teaching score I can describe what the Python interpreter is 3.734 Maybe add a picture here I can describe what a program is 3.6 Weakest learning objective. It can be removed . . . In Python, I can use command-line arguments 1.4 Agree: was not taught In Python, I can write a function that requires an argument 1.06667 Agree: was not taught In Python, I can write a function with a return value 1.333 Agree: was not taught In Python, I can write a function without an argument and without a return type 0.86667 Agree: was not taught I can find and use a Python module on Rackham 1.66667 Agree: was not taught In Python, I can write a function that calls a function 1 Agree: was not taught In Python, I can import the matplotlib library 1.2 Agree: was not taught In Python, I can use a for loop 1.8 Agree: was not taught <ul> <li>My teaching score is the confidence for 'I am comfortable learning Python',   which is 3.8 out of 5, is 7.2 out of 10. A 7.2 for me it is!</li> <li>The weakest session is 'I can describe what a program is': I removed   it, as it is not important.</li> <li> <p>After that, the outcome 'I can describe what the Python interpreter is' is   next but lowest: I need to create an image somewhere :-)</p> </li> <li> <p>[ ] Add an image to show what an interpreter does</p> </li> </ul> <p>Texts:</p> <ul> <li>I have been following during the morning only.   It was very nicely arranged,   and I have appreciated the interactive exercise solving sessions   (despite not having camera and mic).   I will go on studying python from the book on the website!</li> </ul> <p>This is great to hear! I am happy to hear that using a book is appreciated by the learners.</p> <ul> <li>I thought i fulfilled the prerequisites but i apparently [didn't].   I thought the NAISS SUPR account was the account needed but it [wasn't].   I could therefore not participate in the course.   It would be nice if the prerequisites was formulated more clearly.</li> </ul> <p>This is unfortunate. I think it was clearly described and I would describe this more prominently if I would continue the course like this. However, the course will change, with a SNIC project being used by all learners. Let's hope next time such feedback can be avoided :-)</p> <ul> <li>I would have been happy to continue during the last hour as well!</li> <li>It would have been fun to do the remaining pages as well,   or at least one more as we had another hour.</li> </ul> <p>I am happy to see the learners wanted more. But the material was not up to par with my quality standards. It would have been a gamble to continue. In any case, next course iteration, I make sure all is up to par, so to avoid this feedback in the future :-)</p> <ul> <li>The instructor is great, motivated, and interactive,   which makes sure each participant understand each step.   For me, the best part of this course was to let me practice [HPC]   and run simply code. This practice removed the fear to start using [HPC].   I was afraid if I do something wrong while I am logging into [HPC]   and mess up there.   I absolutely recommend others to take this course if they have not.</li> </ul> <p>Wow, that is great to hear!</p> <ul> <li>Could you suggest a resource for further learning?</li> </ul> <p>I agree with this feedback. I abruptly ended the course, without providing this. I will deliver next course iteration :-)</p> <ul> <li> <p>[ ] Add a 'Further learning' session</p> </li> <li> <p>I do not feel like we have learned to do what is mentioned in the 7 last   questions, but I suppose I will be able to find out how to do those.</p> </li> </ul> <p>This is correct: the course material there is not up to par with my quality standards yet.</p> <ul> <li>Really nice intro to Python!   Richel\u00b4s teaching style is very interactive and open,   there is no need to feel scared to ask questions or give wrong answers.   I like the breakout rooms, since it gives the possibility to engage   more with other learners, and help each other out.   The course is adjusted to the speed of the participants,   so no one is rushed during the exercises.   I think it's a good idea to base the course on a book,   so we can keep on learning more in our own time afterwards,   especially since the book includes exercises.  </li> </ul> <p>Yay!</p> <ul> <li>I really enjoyed this course.   I particularly enjoyed how interactive it is,   and how Richel was able to put everyone at ease and   create the perfect environment for interactions.   Even though some of the material was maybe a bit too basic   for my level of knowledge,   the questions asked by Richel are a perfect way to get everyone   to think more in depth about their knowledge,   and reflect on how you could explain those concepts to someone   else if you ever find yourself in that situation.   I would have appreciated it if the course went slightly further   into the introduction to python,   but on the other end I do feel confident that   I can do it on my own now.   Thank you for the great work.</li> </ul> <p>Lovely to hear this!</p>"},{"location":"reflections/20250304/#success-score","title":"Success score","text":"<p>Per request of NAISS, I've added a number: the success score, which is the average confidence in the learning outcomes. Treat with caution <code>[Fenwick, 2001]</code>!</p>"},{"location":"reflections/20250304/#references","title":"References","text":"<ul> <li><code>[Fenwick, 2001]</code> Fenwick, Tara J.   \"Using Student Outcomes to Evaluate Teaching: A Cautious Exploration.\"   New Directions for Teaching &amp; Learning 2001.88 (2001).</li> </ul>"},{"location":"sessions/command_line_arguments/","title":"Command-line arguments","text":"<p>Learning outcomes</p> <ul> <li>Can read the command-line arguments</li> <li>Can run a Python script with command-line arguments</li> </ul> For teachers <p>Teaching goals are:</p> <ul> <li>Learners have used sys.args</li> <li>Learners have run a Python script with command-line arguments</li> </ul> <p>Lesson plan:</p> <ul> <li>5 mins: prior knowledge</li> <li>5 mins: presentation</li> <li>15 mins: challenge</li> <li>5 mins: feedback</li> </ul> <p>Prior:</p> <ul> <li>What are command-line arguments?</li> <li>What is meant with 'a command-line interface'?</li> <li>Why use command-line arguments?</li> </ul>"},{"location":"sessions/command_line_arguments/#overview","title":"Overview","text":"<p>Sometime, also programs need input, for example the name of the input file and the name of a results file:</p> <pre><code>python my_input.csv my_results.csv\n</code></pre> <p>Sometime you need to get 'stuff to work', for example, code written by someone else. In this session, we practice this, going through the problems and errors that occur when you want to 'just want to run the stupid code'.</p> <pre><code>flowchart TD\n    python[[Python]]\n\n    %% Give a white background to all nodes, instead of a transparent one\n    classDef node fill:#fff,color:#000,stroke:#000\n\n    subgraph sub_programming_language[Programming language]\n      interpreted_language[Interpreted language]\n      programming_language[Programming language]\n      scripting_language[Scripting language]\n      interpreter[Interpreter]\n      scripts[Scripts]\n      text_files[Text files]\n    end\n    style sub_programming_language fill:#ccf,color:#000,stroke:#fcc\n\n    subgraph sub_programming_terms[Programming terms]\n      user_input[User input]\n      file_io[File I/O]\n      command_line_arguments[Command-line arguments]\n      variables[Variables]\n      operators[Operators]\n      %% functions[Functions]\n      python_packages[Python packages]\n      graphics[Graphics]\n    end \n    style sub_programming_terms fill:#cfc,color:#000,stroke:#fcc\n\n    subgraph sub_naiss[NAISS]\n      your_hpc_center[Your HPC center]\n      modules[software modules]\n      your_hpc_cluster[Your HPC cluster]\n      text_editors[Text editors]\n      x_forwarding[X-forwarding]\n      remote_desktop[Remote desktop]\n    end\n    style sub_naiss fill:#fcc,color:#000,stroke:#fcc\n\n    python --&gt; |is a| programming_language\n    python --&gt; |is a| interpreted_language\n    python --&gt; |is a| scripting_language\n\n    programming_language --&gt; |uses| text_files\n    interpreted_language --&gt; |has a| interpreter\n    scripting_language --&gt; |is|interpreted_language\n    scripting_language --&gt; |runs| scripts\n    scripts --&gt; |are| text_files\n    scripts --&gt; |can use| command_line_arguments\n\n    python --&gt; |has| python_packages\n    python --&gt; |has| variables\n    %%python --&gt; |has| functions\n    python --&gt; |has| operators\n    %%functions --&gt; |use| variables\n    operators --&gt; |work on| variables\n    python_packages --&gt; |allow| graphics\n    python_packages --&gt; |allow to use| user_input\n    python_packages --&gt; |allow to do| file_io\n    python_packages --&gt; |allow to use| command_line_arguments\n\n    your_hpc_center --&gt; |has| your_hpc_cluster\n    your_hpc_cluster --&gt; |have| modules\n    your_hpc_cluster --&gt; |have| text_editors\n    your_hpc_cluster --&gt; |allow| x_forwarding\n    your_hpc_cluster --&gt; |has| remote_desktop\n    modules --&gt; |allow the use of| python_packages\n    modules --&gt; |allow the use of| interpreter\n\n    text_editors --&gt; |work on|text_files\n    x_forwarding --&gt; |allows|graphics\n    remote_desktop --&gt; |allows|graphics\n\n\n    variables ~~~ your_hpc_center</code></pre>"},{"location":"sessions/command_line_arguments/#exercises","title":"Exercises","text":""},{"location":"sessions/command_line_arguments/#exercise-1-read-the-command-line-arguments","title":"Exercise 1: Read the command-line arguments","text":"<p>Learning outcomes</p> <ul> <li>Rehearse creating a script</li> <li>Read the command-line arguments</li> </ul> <p>Read the official Python documentation about <code>sys.argv</code> here.</p> <p>Create a script with the following text:</p> read_argv.py<pre><code>import sys\n\nprint(sys.argv)\n</code></pre> <p>Run the Python script as shown below. What does it print?</p> <ul> <li><code>python read_argv.py</code></li> </ul> Answer <pre><code>['read_argv.py']\n</code></pre> <p>Run the Python script as shown below. What does it print?</p> <ul> <li> <p><code>python read_argv.py hello world</code></p> <pre><code>['read_argv.py', 'hello', 'world']\n</code></pre> </li> </ul> <p>Run the Python script as shown below. What does it print?</p> <ul> <li> <p><code>python read_argv.py \"hello world\"</code></p> <pre><code>['read_argv.py', 'hello world']\n</code></pre> </li> </ul> <p>Run the Python script as shown below. What does it print?</p> <ul> <li> <p><code>python read_argv.py 'hello world'</code></p> <pre><code>['read_argv.py', 'hello world']\n</code></pre> </li> </ul>"},{"location":"sessions/command_line_arguments/#exercise-2-read-a-command-line-argument","title":"Exercise 2: Read a command-line argument","text":"<p>Learning outcomes</p> <ul> <li>Experience <code>sys.argv</code> is a list</li> <li>First experience in working with a list</li> </ul> <p><code>sys.argv</code> is a list. Here we use this list</p> <p>Read the following sections of How to Think Like a Computer Scientist: Learning with Python 3:</p> <ul> <li><code>11. Lists</code></li> <li><code>11.1. List values</code></li> <li><code>11.2. Accessing elements</code></li> </ul> <p>Modify the script in such a way that the script will only show the first command-line argument.</p> <p>For example, running the script like this:</p> <pre><code>python read_argv.py hello world\n</code></pre> <p>it should show <code>hello</code>.</p>"},{"location":"sessions/command_line_arguments/#exercise-3-work-with-a-command-line-argument","title":"Exercise 3: Work with a command-line argument","text":"<p>Learning outcomes</p> <ul> <li>Do a first string comparison</li> </ul> <p>Read the following sections of How to Think Like a Computer Scientist: Learning with Python 3:</p> <ul> <li>8.7. String comparison</li> </ul> <p>Now, we make the script produce different output.</p> <p>If the script is run like this:</p> <pre><code>python read_argv.py hello\n</code></pre> <p>it should show <code>Hello human!</code>.</p> <p>If the script is run like this:</p> <pre><code>python read_argv.py bye\n</code></pre> <p>it should show <code>Sad to see you go human!</code>.</p> <p>Write the script to do that.</p>"},{"location":"sessions/command_line_arguments/#links","title":"Links","text":"<ul> <li>How to Think Like a Computer Scientist: Learning with Python 3</li> </ul>"},{"location":"sessions/files/","title":"Files","text":"<p>Learning outcomes</p> <ul> <li>Have read a file</li> <li>Have created a file</li> </ul> For teachers <p>Teaching goals are:</p> <ul> <li>Learners have read a file</li> <li>Learners have created a file</li> </ul> <p>Lesson plan:</p> <ul> <li>5 mins: prior knowledge</li> <li>5 mins: presentation</li> <li>15 mins: challenge</li> <li>5 mins: feedback</li> </ul> <p>Prior:</p> <ul> <li>What is file I/O?</li> <li>What are some problems you can have when reading a file?</li> <li>What are some problems you can have when creating a file?</li> </ul>"},{"location":"sessions/files/#overview","title":"Overview","text":"<p>Most programmers need to work on data and produce some result. In Python, we -of course- can read from files and write to files. Here we do just that.</p> <pre><code>flowchart TD\n    python[[Python]]\n\n    %% Give a white background to all nodes, instead of a transparent one\n    classDef node fill:#fff,color:#000,stroke:#000\n\n    subgraph sub_programming_language[Programming language]\n      interpreted_language[Interpreted language]\n      programming_language[Programming language]\n      scripting_language[Scripting language]\n      interpreter[Interpreter]\n      scripts[Scripts]\n      text_files[Text files]\n    end\n    style sub_programming_language fill:#ccf,color:#000,stroke:#fcc\n\n    subgraph sub_programming_terms[Programming terms]\n      user_input[User input]\n      file_io[File I/O]\n      %% command_line_arguments[Command-line arguments]\n      variables[Variables]\n      operators[Operators]\n      %% functions[Functions]\n      python_packages[Python packages]\n      graphics[Graphics]\n    end \n    style sub_programming_terms fill:#cfc,color:#000,stroke:#fcc\n\n    subgraph sub_naiss[NAISS]\n      your_hpc_center[Your HPC center]\n      modules[software modules]\n      your_hpc_cluster[Your HPC cluster]\n      text_editors[Text editors]\n      x_forwarding[X-forwarding]\n      remote_desktop[Remote desktop]\n    end\n    style sub_naiss fill:#fcc,color:#000,stroke:#fcc\n\n    python --&gt; |is a| programming_language\n    python --&gt; |is a| interpreted_language\n    python --&gt; |is a| scripting_language\n\n    programming_language --&gt; |uses| text_files\n    interpreted_language --&gt; |has a| interpreter\n    scripting_language --&gt; |is|interpreted_language\n    scripting_language --&gt; |runs| scripts\n    scripts --&gt; |are| text_files\n    %% scripts --&gt; |can use| command_line_arguments\n\n    python --&gt; |has| python_packages\n    python --&gt; |has| variables\n    %%python --&gt; |has| functions\n    python --&gt; |has| operators\n    %%functions --&gt; |use| variables\n    operators --&gt; |work on| variables\n    python_packages --&gt; |allow| graphics\n    python_packages --&gt; |allow to use| user_input\n    python_packages --&gt; |allow to do| file_io\n    %% python_packages --&gt; |allow to use| command_line_arguments\n\n    your_hpc_center --&gt; |has| your_hpc_cluster\n    your_hpc_cluster --&gt; |have| modules\n    your_hpc_cluster --&gt; |have| text_editors\n    your_hpc_cluster --&gt; |allow| x_forwarding\n    your_hpc_cluster --&gt; |has| remote_desktop\n    modules --&gt; |allow the use of| python_packages\n    modules --&gt; |allow the use of| interpreter\n\n    text_editors --&gt; |work on|text_files\n    x_forwarding --&gt; |allows|graphics\n    remote_desktop --&gt; |allows|graphics\n\n\n    variables ~~~ your_hpc_center</code></pre>"},{"location":"sessions/files/#exercises","title":"Exercises","text":""},{"location":"sessions/files/#exercise-1-create-a-simple-text-file","title":"Exercise 1: create a simple text file","text":"<p>Learning outcomes</p> <ul> <li>Create a simple text file</li> </ul> <p>Read the following sections of How to Think Like a Computer Scientist: Learning with Python 3:</p> <ul> <li>13.1. About files</li> <li>13.2. Writing our first file</li> </ul> <p>Then do:</p> <ul> <li>Put the code at the top of 13.2 in a Python script</li> <li>Run that code</li> <li>Verify that it works as expected</li> </ul>"},{"location":"sessions/files/#exercise-2-read-and-create-a-simple-text-file","title":"Exercise 2: read and create a simple text file","text":"<p>Learning outcomes</p> <ul> <li>Read a simple text file</li> <li>Repeat creating a file</li> <li>Practice to search the internet how to reverse the order of text lines</li> </ul> <p>Read the following sections of How to Think Like a Computer Scientist: Learning with Python 3:</p> <ul> <li>13.4. Turning a file into a list of lines</li> </ul> <p>Consider searching for 'Python reverse order', as you will need to do this in the exercise.</p> <p>Then do:</p> <ul> <li>Exercise 13.11.1</li> </ul> <p>13.11.1</p> <p>Write a program that reads a file and writes out a new file with the lines in reversed order (i.e. the first line in the old file becomes the last one in the new file.)</p> Answer <p>The new thing is to use <code>reversed</code>:</p> <pre><code>f = open(\"friends.txt\", \"r\")\nxs = f.readlines()\nf.close()\n\nxs = reversed(xs)\n\ng = open(\"sortedfriends.txt\", \"w\")\nfor v in xs:\n    g.write(v)\ng.close()\n</code></pre>"},{"location":"sessions/functions/","title":"Functions","text":"<p>Learning outcomes</p> <ul> <li>Use a for loop</li> <li>Write a function without an argument and without a return type</li> <li>Write a function that calls a function</li> <li>Write a function that requires an argument</li> <li>Write a function with a return value</li> </ul> For teachers <p>Teaching goals are:</p> <ul> <li>Learners have used a for loop</li> <li>Learners have written functions</li> </ul> <p>Lesson plan:</p> <ul> <li>5 mins: prior knowledge</li> <li>5 mins: presentation</li> <li>15 mins: challenge</li> <li>5 mins: feedback</li> </ul> <p>Prior:</p> <ul> <li>What are functions?</li> <li>Why use functions?</li> <li>Can you name some Python functions?</li> </ul>"},{"location":"sessions/functions/#overview","title":"Overview","text":"<p>Sometime you need to do a same multi-line calculation multiple times in your code. Instead of copy-pasting, one can use a so-called 'function' to bundle a calculation is something that can be reused.</p> <pre><code>flowchart TD\n    python[[Python]]\n\n    %% Give a white background to all nodes, instead of a transparent one\n    classDef node fill:#fff,color:#000,stroke:#000\n\n    subgraph sub_programming_language[Programming language]\n      interpreted_language[Interpreted language]\n      programming_language[Programming language]\n      scripting_language[Scripting language]\n      interpreter[Interpreter]\n      scripts[Scripts]\n      text_files[Text files]\n    end\n    style sub_programming_language fill:#ccf,color:#000,stroke:#fcc\n\n    subgraph sub_programming_terms[Programming terms]\n      user_input[User input]\n      file_io[File I/O]\n      command_line_arguments[Command-line arguments]\n      variables[Variables]\n      operators[Operators]\n      functions[Functions]\n      python_packages[Python packages]\n      graphics[Graphics]\n    end \n    style sub_programming_terms fill:#cfc,color:#000,stroke:#fcc\n\n    subgraph sub_naiss[NAISS]\n      your_hpc_center[Your HPC center]\n      modules[software modules]\n      your_hpc_cluster[Your HPC cluster]\n      text_editors[Text editors]\n      x_forwarding[X-forwarding]\n      remote_desktop[Remote desktop]\n    end\n    style sub_naiss fill:#fcc,color:#000,stroke:#fcc\n\n    python --&gt; |is a| programming_language\n    python --&gt; |is a| interpreted_language\n    python --&gt; |is a| scripting_language\n\n    programming_language --&gt; |uses| text_files\n    interpreted_language --&gt; |has a| interpreter\n    scripting_language --&gt; |is|interpreted_language\n    scripting_language --&gt; |runs| scripts\n    scripts --&gt; |are| text_files\n    scripts --&gt; |can use| command_line_arguments\n\n    python --&gt; |has| python_packages\n    python --&gt; |has| variables\n    python --&gt; |has| functions\n    python --&gt; |has| operators\n    functions --&gt; |use| variables\n    operators --&gt; |work on| variables\n    python_packages --&gt; |allow| graphics\n    python_packages --&gt; |allow to use| user_input\n    python_packages --&gt; |allow to do| file_io\n    python_packages --&gt; |allow to use| command_line_arguments\n\n    your_hpc_center --&gt; |has| your_hpc_cluster\n    your_hpc_cluster --&gt; |have| modules\n    your_hpc_cluster --&gt; |have| text_editors\n    your_hpc_cluster --&gt; |allow| x_forwarding\n    your_hpc_cluster --&gt; |has| remote_desktop\n    modules --&gt; |allow the use of| python_packages\n    modules --&gt; |allow the use of| interpreter\n\n    text_editors --&gt; |work on|text_files\n    x_forwarding --&gt; |allows|graphics\n    remote_desktop --&gt; |allows|graphics\n\n\n    variables ~~~ your_hpc_center</code></pre>"},{"location":"sessions/functions/#exercises","title":"Exercises","text":""},{"location":"sessions/functions/#exercise-1-using-a-for-loop","title":"Exercise 1: using a for loop","text":"<p>Learning outcomes</p> <ul> <li>Use a for loop</li> </ul> <p>Read the following sections of How to Think Like a Computer Scientist: Learning with Python 3:</p> <ul> <li>3.2. Instances \u2014 a herd of turtles</li> <li>3.3. The for loop</li> <li>3.4. Flow of Execution of the for loop</li> <li>3.5. The loop simplifies our turtle program</li> </ul> <p>Then do exercise</p> <ul> <li>3.8.1</li> <li>3.8.5</li> </ul>"},{"location":"sessions/functions/#exercise-2-a-simple-function","title":"Exercise 2: a simple function","text":"<p>Learning outcomes</p> <ul> <li>Write a function without an argument and without a return type</li> </ul> <p>Read the following sections of How to Think Like a Computer Scientist: Learning with Python 3:</p> <ul> <li>4.1. Functions</li> </ul> <p>Then do exercise:</p> <ul> <li>4.9.1</li> </ul>"},{"location":"sessions/functions/#exercise-3-write-a-function-that-calls-a-function","title":"Exercise 3: write a function that calls a function","text":"<p>Learning outcomes</p> <ul> <li>Write a function that calls a function</li> </ul> <p>Read the following sections of How to Think Like a Computer Scientist: Learning with Python 3:</p> <ul> <li>4.2. Functions can call other functions</li> </ul> <p>Then do exercise:</p> <ul> <li>4.9.2</li> </ul>"},{"location":"sessions/functions/#exercise-3-write-a-function-that-requires-an-argument","title":"Exercise 3: write a function that requires an argument","text":"<p>Learning outcomes</p> <ul> <li>Write a function that requires an argument</li> </ul> <p>Read the following sections of How to Think Like a Computer Scientist: Learning with Python 3:</p> <ul> <li>4.4. Functions that require arguments</li> </ul> <p>Then do exercise:</p> <ul> <li>4.9.3</li> </ul>"},{"location":"sessions/functions/#exercise-4-write-a-function-with-a-return-value","title":"Exercise 4: write a function with a return value","text":"<p>Learning outcomes</p> <ul> <li>Write a function with a return value</li> </ul> <p>Read the following sections of How to Think Like a Computer Scientist: Learning with Python 3:</p> <ul> <li>4.5. Functions that return values</li> </ul> <p>Then do exercise:</p> <ul> <li>4.9.7</li> <li>4.9.8</li> </ul>"},{"location":"sessions/functions/#links","title":"Links","text":"<ul> <li>How to Think Like a Computer Scientist: Learning with Python 3</li> </ul>"},{"location":"sessions/graphics/","title":"Graphics","text":"<p>Learning outcomes</p> <ul> <li>Make a first scatter plot</li> <li>Rehearse running a script that uses an import</li> <li>Rehearse that graphics need X-forwarding</li> </ul> For teachers <p>Teaching goals are:</p> <ul> <li>Learners hear about matplotlib</li> <li>Learners may find out again that X-forwarding is important</li> <li>Learners again have gotten 'stuff to work'</li> </ul> <p>Lesson plan:</p> <ul> <li>5 mins: prior knowledge</li> <li>5 mins: presentation</li> <li>15 mins: challenge</li> <li>5 mins: feedback</li> </ul> <p>Prior:</p> <ul> <li>What is meant with a plotting library?</li> <li>What is meant with a plotting package/module?</li> <li>Can you name a Python plotting package?</li> </ul>"},{"location":"sessions/graphics/#overview","title":"Overview","text":"<p>Sometimes one wants to make a plot, such like a scatterplot or barchart. Matplotlib is a popular Python package to make plots. Here we experience how easy/hard it is to use Matplotlib on Rackham.</p> <pre><code>flowchart TD\n    python[[Python]]\n\n    %% Give a white background to all nodes, instead of a transparent one\n    classDef node fill:#fff,color:#000,stroke:#000\n\n    subgraph sub_programming_language[Programming language]\n      interpreted_language[Interpreted language]\n      programming_language[Programming language]\n      scripting_language[Scripting language]\n      interpreter[Interpreter]\n      scripts[Scripts]\n      text_files[Text files]\n    end\n    style sub_programming_language fill:#ccf,color:#000,stroke:#fcc\n\n    subgraph sub_programming_terms[Programming terms]\n      user_input[User input]\n      file_io[File I/O]\n      command_line_arguments[Command-line arguments]\n      variables[Variables]\n      operators[Operators]\n      %% functions[Functions]\n      python_packages[Python packages]\n      graphics[Graphics]\n    end \n    style sub_programming_terms fill:#cfc,color:#000,stroke:#fcc\n\n    subgraph sub_naiss[NAISS]\n      your_hpc_center[Your HPC center]\n      modules[software modules]\n      your_hpc_cluster[Your HPC cluster]\n      text_editors[Text editors]\n      x_forwarding[X-forwarding]\n      remote_desktop[Remote desktop]\n    end\n    style sub_naiss fill:#fcc,color:#000,stroke:#fcc\n\n    python --&gt; |is a| programming_language\n    python --&gt; |is a| interpreted_language\n    python --&gt; |is a| scripting_language\n\n    programming_language --&gt; |uses| text_files\n    interpreted_language --&gt; |has a| interpreter\n    scripting_language --&gt; |is|interpreted_language\n    scripting_language --&gt; |runs| scripts\n    scripts --&gt; |are| text_files\n    scripts --&gt; |can use| command_line_arguments\n\n    python --&gt; |has| python_packages\n    python --&gt; |has| variables\n    %%python --&gt; |has| functions\n    python --&gt; |has| operators\n    %%functions --&gt; |use| variables\n    operators --&gt; |work on| variables\n    python_packages --&gt; |allow| graphics\n    python_packages --&gt; |allow to use| user_input\n    python_packages --&gt; |allow to do| file_io\n    python_packages --&gt; |allow to use| command_line_arguments\n\n    your_hpc_center --&gt; |has| your_hpc_cluster\n    your_hpc_cluster --&gt; |have| modules\n    your_hpc_cluster --&gt; |have| text_editors\n    your_hpc_cluster --&gt; |allow| x_forwarding\n    your_hpc_cluster --&gt; |has| remote_desktop\n    modules --&gt; |allow the use of| python_packages\n    modules --&gt; |allow the use of| interpreter\n\n    text_editors --&gt; |work on|text_files\n    x_forwarding --&gt; |allows|graphics\n    remote_desktop --&gt; |allows|graphics\n\n\n    variables ~~~ your_hpc_center</code></pre>"},{"location":"sessions/graphics/#exercises","title":"Exercises","text":""},{"location":"sessions/graphics/#exercise-1-use-matplotlib-to-show-a-plot","title":"Exercise 1: Use matplotlib to show a plot","text":"<p>Learning outcomes</p> <ul> <li>Make a first scatter plot</li> <li>Rehearse running a script that uses an import</li> <li>Rehearse that graphics need X-forwarding</li> </ul> <p>Read matplotlib's 'Pyplot tutorial' here.</p> <p>Copy-paste the first script on that page to a script and get it to work. Do you expect this to be easy?</p>"},{"location":"sessions/hello_little_turtles/","title":"Hello, little turtles","text":"<p>Learning outcomes</p> <ul> <li>Practice using the documentation of your HPC cluster</li> <li>Practice using the Python book   How to Think Like a Computer Scientist: Learning with Python 3</li> <li>Have a first 'Get stuff to work' experience</li> <li>Rehearse creating a script</li> <li>Experience when importing a Python package gives an error</li> <li>Search for a module that needs to be loaded</li> <li>Import a Python package successfully</li> </ul> For teachers <p>Teaching goals are:</p> <ul> <li>Learners have observed the error when importing a Python package   without the needed module loaded</li> <li>Learners have searched through the modules of their HPC cluster</li> <li>Learners may find out that X-forwarding is important</li> <li>Learners have gotten 'stuff to work'</li> </ul> <p>Other goals are:</p> <ul> <li>Verify that learners indeed have learned how to login with X-forwarding.   Redirect to remote desktop environment as a solution</li> </ul> <p>Lesson plan:</p> <ul> <li>5 mins: prior knowledge</li> <li>5 mins: presentation</li> <li>25 mins: challenge</li> <li>5 mins: feedback</li> </ul> <p>Prior questions:</p> <ul> <li>What are features of the Python programming language?</li> <li>What are problems you may face when running someone else's Python code?</li> <li>Trick question: what is module?</li> <li>What is a module?</li> <li>Which problem do modules solve?</li> <li>What is a Python module/package?</li> <li>Which problem do Python modules/packages solve?</li> <li>What is X forwarding?</li> </ul>"},{"location":"sessions/hello_little_turtles/#overview","title":"Overview","text":"<p>Sometime you need to get 'stuff to work', for example, code written by someone else. In this session, we practice this, going through the problems and errors that occur when you want to 'just want to run the stupid code'.</p> <pre><code>flowchart TD\n  running_a_script[[Goal: Running a script]]\n  load_modules[Loaded modules?]\n  use_x_forwarding[Use X forwarding?]\n  success[Success: exercise 3]\n  failure_1[Failure: exercise 1]\n  failure_2[Failure: exercise 2]\n  running_a_script --&gt; load_modules\n  load_modules --&gt; |yes!| use_x_forwarding\n\n  load_modules --&gt; |oops, forgot!| failure_1\n  use_x_forwarding --&gt; |oops, forgot!| failure_2\n  use_x_forwarding --&gt; |yes!| success</code></pre>"},{"location":"sessions/hello_little_turtles/#exercises","title":"Exercises","text":""},{"location":"sessions/hello_little_turtles/#exercise-1-fail-at-running-a-first-program","title":"Exercise 1: Fail at running a first program","text":"<p>Learning outcomes</p> <ul> <li>Rehearse creating a script</li> <li>Try to import a Python package</li> <li>Observe errors when a package is absent,   due to a module not being loaded</li> </ul> <p>Read the following sections of How to Think Like a Computer Scientist: Learning with Python 3:</p> <ul> <li>3.1. Our first turtle program</li> </ul> <p>Then:</p> <ul> <li>Log in to Rackham using SSH without X forwarding</li> </ul> Answer <p>This is how:</p> <pre><code>ssh sven@rackham.uppmax.uu.se\n</code></pre> <ul> <li> <p>Do not load a Python module: it is the point of this exercise   to see what happens if you forget to do so!</p> </li> <li> <p>Copy-paste the first script in that section to a script on Rackham.   Below is a copy of that script:</p> </li> </ul> <pre><code>import turtle             # Allows us to use turtles\nwn = turtle.Screen()      # Creates a playground for turtles\nalex = turtle.Turtle()    # Create a turtle, assign to alex\n\nalex.forward(50)          # Tell alex to move forward by 50 units\nalex.left(90)             # Tell alex to turn by 90 degrees\nalex.forward(30)          # Complete the second side of a rectangle\n\nwn.mainloop()             # Wait for user to close window\n</code></pre> <p>Do not call the script <code>turtle.py</code></p> <p>Do not call the script <code>turtle.py</code>. Feel encouraged to do so anyways and observe the error message :-)</p> <ul> <li>Run the script on Rackham using <code>python3</code> and without loading   any modules. Does the error message make sense?</li> </ul> Why use <code>python3</code> instead of <code>python</code>? <p>Because <code>python</code> happens to have access to the <code>turtle</code> library, hence it gives the error of the next exercise directly</p> Answer <p>Here is the error:</p> <pre><code>[richel@rackham3 ~]$ python3 my_little_turtle.py\nTraceback (most recent call last):\n  File \"my_little_turtle.py\", line 1, in &lt;module&gt;\n    import turtle             # Allows us to use turtles\nModuleNotFoundError: No module named 'turtle'\n</code></pre> <p>It does mean that the <code>turtle</code> package is not available. That is correct: the <code>python</code> module (with many packages) has not been loaded yet!</p>"},{"location":"sessions/hello_little_turtles/#exercise-2-fail-at-running-a-first-program-again","title":"Exercise 2: Fail at running a first program again","text":"<p>Learning outcomes</p> <ul> <li>Rehearse creating a script</li> <li>Try to import a Python package</li> <li>Observe errors when X forwarding is not enabled</li> </ul> <ul> <li>Log in to Rackham using SSH without X forwarding</li> </ul> Answer <p>This is how:</p> <pre><code>ssh sven@rackham.uppmax.uu.se\n</code></pre> <ul> <li>Run the script on Rackham and verify it will not run.   Does the error message make sense?</li> </ul> For those that use MobaXterm that cannot get an error <p>It seems that for some MobaXterm users, the X-forwarding is always on, so you cannot get this error.</p> <p>To get the error: create a new terminal and login via <code>ssh</code> without the <code>-X</code> :-)</p> Answer <p>This is what will happen:</p> <p> </p> <p>Log in without X forwarding:</p> <pre><code>richel@richel-N141CU:~/GitHubs/naiss_intro_python/docs/sessions$ ssh richel@rackham.uppmax.uu.se\nrichel@rackham.uppmax.uu.se's password:\n</code></pre> <p>Output:</p> <pre><code>Last login: Fri Aug 16 09:49:42 2024 from h-98-128-228-28.na.cust.bahnhof.se\n _   _ ____  ____  __  __    _    __  __\n| | | |  _ \\|  _ \\|  \\/  |  / \\   \\ \\/ /   | System:    rackham2\n| | | | |_) | |_) | |\\/| | / _ \\   \\  /    | User:      richel\n| |_| |  __/|  __/| |  | |/ ___ \\  /  \\    |\n \\___/|_|   |_|   |_|  |_/_/   \\_\\/_/\\_\\   |\n\n###############################################################################\n\n        User Guides: https://docs.uppmax.uu.se/\n\n        Write to support@uppmax.uu.se, if you have questions or comments.\n</code></pre> <p>Loading the <code>python/3.10.8</code> module, which is good practice (yet irrelevant for the error message):</p> <pre><code>[richel@rackham2 ~]$ module load python/3.10.8\n</code></pre> <p>Running the script:</p> <p> </p> <pre><code>[richel@rackham2 ~]$ python my_little_turtle.py\nTraceback (most recent call last):\n  File \"/domus/h1/richel/my_little_turtle.py\", line 2, in &lt;module&gt;\n    wn = turtle.Screen()      # Creates a playground for turtles\n  File \"/sw/comp/python/3.10.8/rackham/lib/python3.10/turtle.py\", line 3664, in Screen\n    Turtle._screen = _Screen()\n  File \"/sw/comp/python/3.10.8/rackham/lib/python3.10/turtle.py\", line 3680, in __init__\n    _Screen._root = self._root = _Root()\n  File \"/sw/comp/python/3.10.8/rackham/lib/python3.10/turtle.py\", line 435, in __init__\n    TK.Tk.__init__(self)\n  File \"/sw/comp/python/3.10.8/rackham/lib/python3.10/tkinter/__init__.py\", line 2299, in __init__\n    self.tk = _tkinter.create(screenName, baseName, className, interactive, wantobjects, useTk, sync, use)\n_tkinter.TclError: no display name and no $DISPLAY environment variable\n[richel@rackham2 ~]$\n</code></pre> <p>The error is <code>no display name and no $DISPLAY environment variable</code>. In simpler terms, this can be read as 'Nothing to show graphics with'.</p> <p>The solution is to login to Rackham with X forwarding enabled</p>"},{"location":"sessions/hello_little_turtles/#exercise-3-running-a-first-program","title":"Exercise 3: Running a first program","text":"<p>Learning outcomes</p> <ul> <li>Import a Python package</li> <li>Practice to search for a module that needs to be loaded</li> <li>Get a script that requires a  module to be loaded to work</li> </ul> <p>Now we try to make this script work!</p> <p>Read:</p> <ul> <li>the UPPMAX documentation 'Loading Python packages'</li> <li>the UPPMAX documentation 'Modules'</li> </ul> <p>Now, try to get the script to work.</p> <p>When running the code, there should be a visible pop-up window. If not, re-read the UPPMAX documentation page 'Login to Rackham' and enable X-forwarding. If X-forwarding does not work, use the Rackham remote desktop environment.</p> Need more hints? <p>The exercise is about practicing to search for an UPPMAX module, hence giving away the answer makes this session useless.</p> <p>However, if you feel stuck too much, you can watch a video in which this exercise is done here</p> <ul> <li>Log in to Rackham using SSH with X forwarding. How does it look?</li> </ul> Answer <p>This is how to log in with X forwarding enabled:</p> <pre><code>ssh -X sven@rackham.uppmax.uu.se\n</code></pre> <p>It looks like this:</p> <p></p>"},{"location":"sessions/hello_little_turtles/#links","title":"Links","text":"<ul> <li>How to Think Like a Computer Scientist: Learning with Python 3</li> </ul>"},{"location":"sessions/introduction_basic_python/","title":"Overview","text":"<p>This module introduces the fundamentals of Python programming language.</p> <p>Content</p> <ul> <li>The course emphasises hands-on experience with Python in an HPC   environment. It focuses on the basics and can be taken by someone   without any prior Python experience.</li> <li>You will learn:<ul> <li> How to load and use different version   of Python on our clusters</li> <li> How to create and run a Python script</li> <li>How to work with basic builtin data types</li> <li>How to use modules to load a Python package</li> <li>How to reading files</li> <li>How to writing to files</li> <li>How to creating a command line program that can take input arguments</li> <li>How to use control flow statements</li> <li>How to draw a plot (i.e. an x-y line plot)</li> <li>How to bundle code into reusable functions</li> </ul> </li> </ul> For teachers <p>Classic-style lecture and exercises can be found at:</p> <ul> <li>../classic_sessions/afternoon_lecture.md</li> <li>../classic_sessions/afternoon_exercise.md</li> </ul> <pre><code>flowchart TD\n  python[[Python]]\n\n\n  user_input[User input]\n  file_io[File I/O]\n  command_line_arguments[Command-line arguments]\n  variables[Variables]\n  operators[Operators]\n  functions[Functions]\n  python_packages[Python packages]\n  graphics[Graphics]\n\n\n  python --&gt; |has| python_packages\n  python --&gt; |has| variables\n  python --&gt; |has| functions\n  python --&gt; |has| operators\n  functions --&gt; |use| variables\n  operators --&gt; |work on| variables\n  python_packages --&gt; |allow| graphics\n  python_packages --&gt; |allow to use| user_input\n  python_packages --&gt; |allow to do| file_io\n  python_packages --&gt; |allow to use| command_line_arguments</code></pre> <ul> <li>Variables, expressions and statements, variables</li> <li>Variables, expressions and statements, operators</li> <li>Variables, expressions and statements, user input</li> <li>Modules and Python packages</li> <li>File IO</li> <li>Command line arguments</li> <li>Graphics</li> <li>Functions</li> </ul>"},{"location":"sessions/introduction_getting_it_to_run/","title":"Getting it to run","text":"<p>This module introduces the fundamentals of Python programming language.</p> <p>Learning outcomes</p> <ul> <li>Practice using the documentation of your HPC cluster</li> <li>Practice using the Python book   How to Think Like a Computer Scientist: Learning with Python 3</li> <li>Get Python code to run on your HPC cluster</li> <li>Develop Python code on your HPC cluster</li> <li>Understand the minimum of Python</li> </ul> For teachers <p>Classic-style lecture and exercises can be found at:</p> <ul> <li>../classic_sessions/morning_lecture.md</li> <li>../classic_sessions/morning_exercise.md</li> </ul> <pre><code>flowchart TD\n    python[[Python]]\n\n    %% Give a white background to all nodes, instead of a transparent one\n    classDef node fill:#fff,color:#000,stroke:#000\n\n    subgraph sub_programming_language[Programming language]\n      interpreted_language[Interpreted language]\n      programming_language[Programming language]\n      scripting_language[Scripting language]\n      interpreter[Interpreter]\n      scripts[Scripts]\n      text_files[Text files]\n    end\n    style sub_programming_language fill:#ccf,color:#000,stroke:#fcc\n\n    subgraph sub_programming_terms[Programming terms]\n      user_input[User input]\n      %% file_io[File I/O]\n      %% command_line_arguments[Command-line arguments]\n      variables[Variables]\n      operators[Operators]\n      %% functions[Functions]\n      python_packages[Python packages]\n      %% graphics[Graphics]\n    end \n    style sub_programming_terms fill:#cfc,color:#000,stroke:#fcc\n\n    subgraph sub_naiss[NAISS]\n      your_hpc_center[Your HPC center]\n      modules[software modules]\n      your_hpc_cluster[Your HPC cluster]\n      text_editors[Text editors]\n      %% x_forwarding[X-forwarding]\n      %% remote_desktop[Remote desktop]\n    end\n    style sub_naiss fill:#fcc,color:#000,stroke:#fcc\n\n    python --&gt; |is a| programming_language\n    python --&gt; |is a| interpreted_language\n    python --&gt; |is a| scripting_language\n\n    programming_language --&gt; |uses| text_files\n    interpreted_language --&gt; |has a| interpreter\n    scripting_language --&gt; |is|interpreted_language\n    scripting_language --&gt; |runs| scripts\n    scripts --&gt; |are| text_files\n    %% scripts --&gt; |can use| command_line_arguments\n\n    python --&gt; |has| python_packages\n    python --&gt; |has| variables\n    %%python --&gt; |has| functions\n    python --&gt; |has| operators\n    %%functions --&gt; |use| variables\n    operators --&gt; |work on| variables\n    %%python_packages --&gt; |allow| graphics\n    python_packages --&gt; |allow to use| user_input\n    %% python_packages --&gt; |allow to do| file_io\n    %% python_packages --&gt; |allow to use| command_line_arguments\n\n    your_hpc_center --&gt; |has| your_hpc_cluster\n    your_hpc_cluster --&gt; |have| modules\n    your_hpc_cluster --&gt; |have| text_editors\n    %% your_hpc_cluster --&gt; |allow| x_forwarding\n    %% your_hpc_cluster --&gt; |has| remote_desktop\n    modules --&gt; |allow the use of| python_packages\n    modules --&gt; |allow the use of| interpreter\n\n    text_editors --&gt; |work on|text_files\n    %%x_forwarding --&gt; |allows|graphics\n    %%remote_desktop --&gt; |allows|graphics\n\n\n    variables ~~~ your_hpc_center</code></pre> <ul> <li>Using the Python interpreter</li> <li>The way of the program</li> <li>Working with Python scripts</li> </ul>"},{"location":"sessions/the_way_of_the_program/","title":"The Way Of The Program","text":"<p>Learning outcomes</p> <ul> <li>Practice using the documentation of your HPC cluster</li> <li>Practice using the Python book   How to Think Like a Computer Scientist: Learning with Python 3</li> <li>Get a first impression of what the Python programming language is</li> <li>Know the basics of what the Python interpreter is</li> <li>Get a first idea of what a program is</li> <li>Hear about the three types of errors</li> <li>Build up experience with the Python interpreter</li> <li>Use a text editor on a your HPC cluster</li> <li>Create a Python script</li> <li>Run a Python script</li> </ul> For teachers <p>Teaching goals are:</p> <ul> <li>Learners have a general idea about what the Python programming language is</li> <li>Learners have used the word 'Python interpreter'</li> <li>Learners have a general idea about what a program is</li> <li>Learners have used the terms syntax error, runtime error and semantic error</li> <li>Learners have run code in the Python interpreter</li> </ul> <p>Other goals are:</p> <ul> <li>Verify that learners indeed have learned how to create a file</li> <li>Verify that learners indeed have learned how to use a text editor</li> </ul> <p>Lesson plan:</p> <ul> <li>5 mins: prior knowledge</li> <li>5 mins: presentation</li> <li>15 mins: challenge</li> <li>5 mins: feedback</li> </ul> <p>Prior questions:</p> <ul> <li>What types of programming errors exist?</li> <li>Can you name of types of programming bugs?</li> <li>What is a script?</li> <li>Can you name a text editor?</li> </ul>"},{"location":"sessions/the_way_of_the_program/#why","title":"Why?","text":"<p>At the start of learning Python, there are many new terms. Using a book to learn these is a good start.</p> <p>What is Python? What is a programming language? What type of errors will I write when programming? How do I write code in Python?</p> <p>These fundamental question are discussed and practiced in this session.</p> <pre><code>flowchart TD\n    python[[Python]]\n\n    %% Give a white background to all nodes, instead of a transparent one\n    classDef node fill:#fff,color:#000,stroke:#000\n\n    subgraph sub_programming_language[Python as a language]\n      interpreted_language[Interpreted language]\n      programming_language[Programming language]\n      scripting_language[Scripting language]\n      interpreter[Interpreter]\n      scripts[Scripts]\n      text_files[Text files]\n    end\n    style sub_programming_language fill:#ccf,color:#000,stroke:#fcc\n\n\n    subgraph sub_naiss[NAISS]\n      your_hpc_center[Your HPC center]\n      your_hpc_cluster[Your HPC cluster]\n      modules[software modules]\n      text_editors[Text editors]\n      %%x_forwarding[X-forwarding]\n      %%remote_desktop[Remote desktop]\n    end\n    style sub_naiss fill:#fcc,color:#000,stroke:#fcc\n\n    python --&gt; |is a| programming_language\n    python --&gt; |is a| interpreted_language\n    python --&gt; |is a| scripting_language\n\n    programming_language --&gt; |uses| text_files\n    interpreted_language --&gt; |has a| interpreter\n    scripting_language --&gt; |is a|interpreted_language\n    scripting_language --&gt; |runs| scripts\n    scripts --&gt; |are| text_files\n    %% scripts --&gt; |can use| command_line_arguments\n\n    your_hpc_center --&gt; |has| your_hpc_cluster\n    your_hpc_cluster --&gt; |has| modules\n    your_hpc_cluster --&gt; |has| text_editors\n    modules --&gt; |allow the use of| interpreter\n\n    text_editors --&gt; |work on|text_files\n    %%x_forwarding --&gt; |allows|graphics\n    %%remote_desktop --&gt; |allows|graphics\n\n    %% variables ~~~ your_hpc_center</code></pre>"},{"location":"sessions/the_way_of_the_program/#exercises","title":"Exercises","text":"Enjoy a video? <p>You can find a video with solutions to these exercises here</p>"},{"location":"sessions/the_way_of_the_program/#exercise-1-python-and-the-python-interpreter","title":"Exercise 1: Python and the Python interpreter","text":"<p>Learning outcomes</p> <ul> <li>Get a first impression of what the Python programming language is</li> <li>Know the basics of what the Python interpreter is</li> <li>Get a first idea of what a program is</li> <li>Hear about the three types of errors</li> <li>Build up experience with the Python interpreter</li> </ul> <p>Read the following sections of How to Think Like a Computer Scientist: Learning with Python 3:</p> <ul> <li>1.1 The Python programming language</li> <li>1.2. What is a program?</li> <li>1.4. Syntax errors</li> <li>1.5. Runtime errors</li> <li>1.6. Semantic errors</li> <li>1.9. The first program</li> </ul> <p>Then in section 1.12, do exercises 1 to and including 5. For your convenience, the questions are copy-pasted below:</p>"},{"location":"sessions/the_way_of_the_program/#exercise-11-question-1121","title":"Exercise 1.1: Question 1.12.1","text":"<p>Write an English sentence with understandable semantics but incorrect syntax. Write another English sentence which has correct syntax but has semantic errors.</p> Answer <p>From the Wikipedia link: 'A syntax error is an error in the syntax of a sequence of characters that is intended to be written in a particular programming language'.</p> <p>An English sentence with understandable logic but incorrect syntax:</p> <pre><code>One plus one is twoooooooo\n</code></pre> <p>A semantic error is also called a logic error, hence a sentence with correct syntax and semantic errors is:</p> <p>From here, where the sentence is attributed to Noam Chomsky:</p> <pre><code>Colorless green ideas sleep furiously\n</code></pre> <p>From here:</p> <pre><code>My mother's white cat is black.\n</code></pre>"},{"location":"sessions/the_way_of_the_program/#exercise-12-question-1122","title":"Exercise 1.2: Question 1.12.2","text":"<p>Using the Python interpreter, type <code>1 + 2</code> and then hit return. Python evaluates this expression, displays the result, and then shows another prompt. <code>*</code> is the multiplication operator, and <code>**</code> is the exponentiation operator. Experiment by entering different expressions and recording what is displayed by the Python interpreter.</p> Answer <p>This is more about experimenting with the operators <code>+</code>, <code>*</code> and <code>**</code>. Here are some things to let the Python interpreter evaluate:</p> <pre><code>1+2\n1 + 2\n1*2\n2 * 3\n2**3\n</code></pre>"},{"location":"sessions/the_way_of_the_program/#exercise-13-question-1123","title":"Exercise 1.3: Question 1.12.3","text":"<p>Type <code>1 2</code> and then hit return. Python tries to evaluate the expression, but it can't because the expression is not syntactically legal. Instead, it shows the error message:</p> <pre><code>File \"&lt;interactive input&gt;\", line 1\n1 2\n  ^\nSyntaxError: invalid syntax\n</code></pre> <p>In many cases, Python indicates where the syntax error occurred, but it is not always right, and it doesn't give you much information about what is wrong.</p> <p>So, for the most part, the burden is on you to learn the syntax rules.</p> <p>In this case, Python is complaining because there is no operator between the numbers.</p> <p>See if you can find a few more examples of things that will produce error messages when you enter them at the Python prompt. Write down what you enter at the prompt and the last line of the error message that Python reports back to you.</p> Answer <p>This question is more about experimenting, armed with limited knowledge on <code>+</code>, <code>*</code>, <code>**</code> and <code>print</code>.</p> <p>Here are some of my favorites:</p> <pre><code>&gt;&gt;&gt;  1\n  File \"&lt;stdin&gt;\", line 1\n    1\nIndentationError: unexpected indent\n\n&gt;&gt;&gt; print 1\n  File \"&lt;stdin&gt;\", line 1\n    print 1\n    ^^^^^^^\nSyntaxError: Missing parentheses in call to 'print'. Did you mean print(...)?\n\n&gt;&gt;&gt; print 1 + 1\n  File \"&lt;stdin&gt;\", line 1\n    print 1 + 1\n    ^^^^^^^^^^^\nSyntaxError: Missing parentheses in call to 'print'. Did you mean print(...)?\n\n&gt;&gt;&gt; print(1) + print(1)\n1\n1\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nTypeError: unsupported operand type(s) for +: 'NoneType' and 'NoneType'\n\n&gt;&gt;&gt; 1++\n  File \"&lt;stdin&gt;\", line 1\n    1++\n       ^\nSyntaxError: invalid syntax\n</code></pre>"},{"location":"sessions/the_way_of_the_program/#exercise-14-question-1124","title":"Exercise 1.4: Question 1.12.4","text":"<p>Type <code>print(\"hello\")</code>. Python executes this, which has the effect of printing the letters h-e-l-l-o. Notice that the quotation marks that you used to enclose the string are not part of the output. Now type \"hello\" and describe your result. Make notes of when you see the quotation marks and when you don\u2019t.</p> Answer <p>Here are the four combinations of using <code>print</code> yes/no and using single/double quotes:</p> <pre><code>&gt;&gt;&gt; print(\"Hello\")\nHello\n&gt;&gt;&gt; print('Hello')\nHello\n&gt;&gt;&gt; \"Hello\"\n'Hello'\n&gt;&gt;&gt; 'Hello'\n'Hello'\n</code></pre> <p>A correct conclusion is:</p> <ul> <li>When using <code>print</code>, any type of quotes is removed</li> <li>When not using <code>print</code>, the word is printed in single quotes</li> </ul>"},{"location":"sessions/the_way_of_the_program/#exercise-15-question-1125","title":"Exercise 1.5: Question 1.12.5","text":"<p>Type <code>cheese</code> without the quotation marks. The output will look something like this:</p> <pre><code>Traceback (most recent call last):\n  File \"&lt;interactive input&gt;\", line 1, in ?\nNameError: name 'cheese' is not defined\n</code></pre> <p>This is a run-time error; specifically, it is a <code>NameError</code>, and even more specifically, it is an error because the name <code>cheese</code> is not defined. If you don't know what that means yet, you will soon.</p> Answer <p>This is more of an explanation. Indeed:</p> <pre><code>&gt;&gt;&gt; cheese\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nNameError: name 'cheese' is not defined\n</code></pre>"},{"location":"sessions/the_way_of_the_program/#exercise-2-running-a-python-script","title":"Exercise 2: Running a Python script","text":"<p>Learning outcomes</p> <ul> <li>create a Python script</li> <li>run a Python script</li> <li>use a text editor on your HPC cluster</li> </ul> <p>Here we continue with How to Think Like a Computer Scientist: Learning with Python 3 chapter 1. In section 1.12, we'll do exercises 6. For your convenience, the question is split into pieces and is copy-pasted below.</p>"},{"location":"sessions/the_way_of_the_program/#exercise-21-question-1126a","title":"Exercise 2.1: Question 1.12.6a","text":"<p>Type <code>6 + 4 * 9</code> at the Python prompt and hit enter. Record what happens.</p> Answer <pre><code>&gt;&gt;&gt; 6 + 4 * 9\n42\n</code></pre>"},{"location":"sessions/the_way_of_the_program/#exercise-22-text-editors","title":"Exercise 2.2: Text editors","text":"<p>Search your HPC cluster's documentation for a text editor and decide on which one to use. Pick the simplest one if you do not already know a text editor.</p> Answer HPC Cluster Link to documentation Alvis  None Bianca Here COSMOS  None Dardel  None Kebnekaise Here LUMI  None Rackham Here Tetralith Here <ul> <li> means that there is either no direct to the documentation   and/or the documentation present is incomplete.   You are encouraged   to contact your HPC center to help them help you better</li> </ul> <p>The simplest text editor is called <code>nano</code>.</p>"},{"location":"sessions/the_way_of_the_program/#exercise-23-question-1126b","title":"Exercise 2.3: Question 1.12.6b","text":"<p>Use <code>nano</code> (or your favorite text editor) to create a Python script with the following contents:</p> <pre><code>6 + 4 * 9\n</code></pre> <p>What happens when you run this script?</p> Answer <p>Creating a Python script <code>my_script.py</code> using <code>nano</code>:</p> <pre><code>nano my_script.py\n</code></pre> <p>The content of the file should be:</p> <pre><code>6 + 4 * 9\n</code></pre> <p>Running the Python script <code>my_script.py</code>:</p> <pre><code>python my_script.py\n</code></pre>"},{"location":"sessions/the_way_of_the_program/#exercise-24-question-1126c","title":"Exercise 2.4: Question 1.12.6c","text":"<p>Now change the script contents to:</p> <pre><code>print(6 + 4 * 9)\n</code></pre> <p>and run it again.</p> <p>What happened this time?</p> Answer <p>Modifying the Python script again:</p> <pre><code>nano my_script.py\n</code></pre> <p>The content of the file should be:</p> <pre><code>print(6 + 4 * 9)\n</code></pre> <p>Running the Python script <code>my_script.py</code>:</p> <pre><code>python my_script.py\n</code></pre> <p>Gives:</p> <pre><code>42\n</code></pre>"},{"location":"sessions/the_way_of_the_program/#exercise-25-recap","title":"Exercise 2.5: Recap","text":"<p>Here is the remaining text in the book, pasted here for you convenience:</p> <p>Whenever an expression is typed at the Python prompt, it is evaluated and the result is automatically shown on the line below (Like on your calculator, if you type this expression you'll get the result 42).</p> <p>A script is different, however. Evaluations of expressions are not automatically displayed, so it is necessary to use the <code>print</code> function to make the answer show up.</p> <p>It is hardly ever necessary to use the <code>print</code> function in immediate mode at the command prompt.</p>"},{"location":"sessions/using_the_python_interpreter/","title":"Using the Python interpreter","text":"<p>Learning outcomes</p> <ul> <li>Practice using the documentation of your HPC cluster</li> <li>Practice using the Python book   How to Think Like a Computer Scientist: Learning with Python 3</li> <li>To be able to login to your HPC cluster</li> <li>To be able to load Python</li> <li>To be able to run a minimal Python program</li> </ul> For teachers <p>Teaching goals are:</p> <ul> <li>Learners have used the documentation of their HPC cluster</li> <li>Learners have used the Python book</li> <li>Learners have used the Python interpreter</li> <li>Learners have loaded Python</li> </ul> <p>Other goals are:</p> <ul> <li>Verify that learners indeed have learned how to login</li> <li>Verify that learners indeed have learned how to use the module system</li> </ul> <p>Prior and feedback question:</p> <ul> <li>What is Python?</li> <li>What are features of the Python language?</li> <li>What is an interpreted language?</li> <li>What is a scripting language?</li> <li>What is an interpreter?</li> <li>What is an HPC cluster?</li> <li>What are features of your HPC cluster?</li> <li>What is a login node?</li> <li>What is the rule on what to run on a login node?</li> <li>How to run heavy Python calculations on your HPC cluster?</li> <li>How to make your Python scripts reproducible?</li> </ul> <p>Lesson plan:</p> <ul> <li>5 mins: prior knowledge</li> <li>5 mins: presentation</li> <li>15 mins: challenge</li> <li>5 mins: feedback</li> </ul> <p>Notes:</p> <ul> <li>For those that use Bianca, it may take some time to get a login node.   Encourage those to try Rackham while waiting</li> </ul>"},{"location":"sessions/using_the_python_interpreter/#why","title":"Why?","text":"<p>You want to make a computer run Python code, for some good reason. Here we do so!</p> <p>To develop code in Python on your HPC clusters, one needs to:</p> <ul> <li>Login to that HPC cluster, to be able to work on it</li> <li>Load the Python module, to be able to use a modern Python interpreter</li> <li>Use the Python interpreter, to run Python code</li> </ul> <p>Luckily, the documentation of your HPC center should allow you to do this by yourself!</p> <p>These exercises will ensure you are able to run a minimal Python program.</p> <p>The difficulty of these exercises depends on your HPC cluster:</p> HPC cluster name Need VPN? Need SSH keys? Need 2FA? Documentation Difficulty Alvis Yes No No Minimal Medium Bianca Yes No Yes Excellent Medium COSMOS No No Yes Good Easy Dardel No Yes No Minimal Medium Kebnekaise No No No Good Easy Rackham No No No Excellent Easy Tetralith No No Yes Good Easy <pre><code>    flowchart TD\n        python[[Python]]\n\n        %% Give a white background to all nodes, instead of a transparent one\n        classDef node fill:#fff,color:#000,stroke:#000\n\n        subgraph sub_programming_language[Python as a language]\n        interpreted_language[Interpreted language]\n        programming_language[Programming language]\n        scripting_language[Scripting language]\n        interpreter[Interpreter]\n        %% scripts[Scripts]\n        %% text_files[Text files]\n        end\n        style sub_programming_language fill:#ccf,color:#000,stroke:#fcc\n\n\n        subgraph sub_naiss[NAISS]\n          your_hpc_center[Your HPC center]\n          your_hpc_cluster[Your HPC cluster]\n          modules[software modules]\n          %% text_editors[Text editors]\n          %%x_forwarding[X-forwarding]\n          %%remote_desktop[Remote desktop]\n        end\n        style sub_naiss fill:#fcc,color:#000,stroke:#fcc\n\n        python --&gt; |is a| programming_language\n        python --&gt; |is a| interpreted_language\n        python --&gt; |is a| scripting_language\n\n        %% programming_language --&gt; |uses| text_files\n        interpreted_language --&gt; |has a| interpreter\n        scripting_language --&gt; |is a|interpreted_language\n        %% scripting_language --&gt; |runs| scripts\n        %% scripts --&gt; |are| text_files\n        %% scripts --&gt; |can use| command_line_arguments\n\n        your_hpc_center --&gt; |has| your_hpc_cluster\n        your_hpc_cluster --&gt; |uses| modules\n        %%your_hpc_cluster --&gt; |have| text_editors\n        %%your_hpc_cluster --&gt; |allow| x_forwarding\n        %%your_hpc_cluster --&gt; |has| remote_desktop\n        %% modules --&gt; |allow the use of| python_packages\n        modules --&gt; |allow the use of| interpreter\n\n        %% text_editors --&gt; |work on|text_files\n        %%x_forwarding --&gt; |allows|graphics\n        %%remote_desktop --&gt; |allows|graphics\n\n\n        %% variables ~~~ your_hpc_center</code></pre>"},{"location":"sessions/using_the_python_interpreter/#exercises","title":"Exercises","text":"Enjoy a video? <p>You can find a video with solutions to these exercises:</p> HPC Cluster Login method Link to video Alvis SSH here Bianca SSH here COSMOS SSH here Dardel SSH here Kebnekaise SSH here Rackham SSH here Tetralith SSH here"},{"location":"sessions/using_the_python_interpreter/#exercise-0-pick-a-zoom-room","title":"Exercise 0: pick a Zoom room","text":"<p>We will use breakout rooms, as this is best for learning. Ideally, each breakout room has 2 learners for the same HPC cluster. As it cannot be predicted how many learners show up per cluster, we do this dynamically:</p> <ul> <li>Go to the main breakout room of your HPC cluster</li> </ul> HPC cluster name Main breakout room Alvis Room 1 Bianca Room 2 COSMOS Room 3 Dardel Room 4 Kebnekaise Room 5 Rackham Room 6 Tetralith Room 7 <ul> <li>When the main breakout room reaches 4 learners, decide upon 2 to   move to a free breakout room. Repeat until the group size is below 4.</li> <li>When you are the only one in your main breakout room,   the teachers will let you decide to either work in silence or   to join another group. You will be takes care of well :-)</li> </ul>"},{"location":"sessions/using_the_python_interpreter/#exercise-1-login-to-your-hpc-cluster","title":"Exercise 1: login to your HPC cluster","text":"<p>Go to the documentation of your HPC cluster and search for the login procedure(s).</p> <p>Then answer these questions:</p> <ul> <li>Login to your HPC cluster in any way</li> </ul> Answer <p>The documentation for the your HPC cluster can be found at:</p> HPC Cluster Link to documentation Alvis here Bianca here COSMOS here Dardel here Kebnekaise here LUMI here Rackham here Tetralith here <p>From there, searching for, for example, 'login', you will find information on how to do so.</p> <p></p> HPC Cluster Link to documentation Alvis here Bianca here COSMOS here Dardel here Kebnekaise here LUMI here and here Rackham here Tetralith here <ul> <li> means that there is either no direct to the documentation   and/or the documentation present is incomplete.   You are encouraged   to contact your HPC center to help them help you better</li> </ul>"},{"location":"sessions/using_the_python_interpreter/#exercise-2-load-the-python-module","title":"Exercise 2: load the Python module","text":"<p>Go to the documentation of your HPC cluster and load a Python software module.</p> Answer <p>From the documentation of your center, searching for, for example, 'Python module', you will find information on how to load the Python module.</p> <p></p> HPC Cluster Link to documentation Solution Alvis  None, closest is here <code>module load Python/3.12.3-GCCcore-13.3.0</code> Bianca here <code>module load python/3.11.4</code> COSMOS here <code>module load GCCcore/13.2.0 Python/3.11.5</code> Dardel here <code>module load bioinfo-tools python/3.11.4</code> Kebnekaise here <code>module load GCC/12.3.0 Python/3.11.3</code> LUMI here Unknown Rackham here <code>module load python</code> Tetralith here <code>module load Python/3.10.4-env-hpc2-gcc-2022a-eb</code> <ul> <li> means that there is either no direct to the documentation   and/or the documentation present is incomplete.   You are encouraged   to contact your HPC center to help them help you better</li> </ul>"},{"location":"sessions/using_the_python_interpreter/#exercise-3-start-the-python-interpreter","title":"Exercise 3: start the Python interpreter","text":"<p>Go to the documentation of your HPC cluster and start the Python interpreter.</p> Answer <p>From the documentation of your center, searching for, for example, 'Python' or 'Python interpreter', you will find information on how to start the Python interpreter.</p> <p></p> HPC Cluster Link to documentation Solution Alvis here <code>python</code> Bianca here <code>python</code> COSMOS here <code>python</code> Dardel here <code>python</code> Kebnekaise here <code>python</code> LUMI here Probably: <code>python</code> Rackham here <code>python</code> Tetralith here <code>python</code> <ul> <li> means that there is either no direct to the documentation   and/or the documentation present is incomplete.   You are encouraged   to contact your HPC center to help them help you better</li> </ul> Cannot get this to work? <p>If there is no time to get this fixed during the course, you are also use Python on your local computer.</p>"},{"location":"sessions/using_the_python_interpreter/#exercise-4-run-a-hello-world-program","title":"Exercise 4: run a 'Hello world' program","text":"<p>Copy-paste the following code to the Python interpreter:</p> <pre><code>print('Hello, world!')\n</code></pre> <p>Press enter.</p> <p>How does that look like?</p> Answer <p>You output will look similar to this:</p> <pre><code>$ python\nPython 3.12.3 (main, Nov  6 2024, 18:32:19) [GCC 13.2.0] on linux\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n&gt;&gt;&gt; print('Hello, world!')\nHello, world!\n&gt;&gt;&gt; \n</code></pre> <p>Congratulations, you've just run a 'Hello world' program </p>"},{"location":"sessions/variables_expressions_and_statements_1/","title":"Variables, expressions and statements: variables","text":"<p>Learning outcomes</p> <ul> <li>Practice using the documentation of your HPC cluster</li> <li>Practice using the Python book   How to Think Like a Computer Scientist: Learning with Python 3</li> <li>Get the type of an object</li> <li>Create a variable</li> <li>Use a variable</li> <li>Practice converting an equation to Python code</li> </ul> For teachers <p>Teaching goals are:</p> <ul> <li>Learners have worked with variables</li> <li>Learners understand the purpose of variables</li> <li>Learners have obtained the data type of a variable</li> <li>Learners have heard about what a data type is</li> <li>Learners have practiced convert an equation and a text question to Python</li> </ul> <p>Lesson plan:</p> <p>Exercises:</p> <ul> <li>5 mins: prior knowledge</li> <li>5 mins: presentation</li> <li>15 mins: challenge</li> <li>5 mins: feedback</li> </ul> <p>Prior questions:</p> <ul> <li>What is a data type?</li> <li>Can you name a Python data type?</li> <li>What is an object?</li> <li>What is a variable?</li> <li>What are rules for naming a variables?</li> <li>What are good practices for the name of a variable?</li> <li>What is an operator?</li> <li>Can you name an operator?</li> </ul>"},{"location":"sessions/variables_expressions_and_statements_1/#overview","title":"Overview","text":"<p>In any non-trivial calculation, we want to let our computer remember things, such as the content of a data file, or the parameters/settings we use in our program. Variables allows one to make a computer store ('remember') information. Here we use our first simple variables.</p> <p>Also we practice converting an equation and a mathematical problem to Python code. We will discover the helpful modulo operator.</p> <pre><code>flowchart TD\n    python[[Python]]\n\n    %% Give a white background to all nodes, instead of a transparent one\n    classDef node fill:#fff,color:#000,stroke:#000\n\n    subgraph sub_programming_language[Programming language]\n      interpreted_language[Interpreted language]\n      programming_language[Programming language]\n      scripting_language[Scripting language]\n      interpreter[Interpreter]\n      scripts[Scripts]\n      text_files[Text files]\n    end\n    style sub_programming_language fill:#ccf,color:#000,stroke:#fcc\n\n    subgraph sub_programming_terms[Programming terms]\n      user_input[User input]\n      %% file_io[File I/O]\n      %% command_line_arguments[Command-line arguments]\n      variables[Variables]\n      operators[Operators]\n      %% functions[Functions]\n      python_packages[Python packages]\n      %% graphics[Graphics]\n    end \n    style sub_programming_terms fill:#cfc,color:#000,stroke:#fcc\n\n    subgraph sub_naiss[NAISS]\n      your_hpc_center[Your HPC center]\n      your_hpc_cluster[Your HPC cluster]\n      modules[software modules]\n      text_editors[Text editors]\n      x_forwarding[X-forwarding]\n      remote_desktop[Remote desktop]\n    end\n    style sub_naiss fill:#fcc,color:#000,stroke:#fcc\n\n    python --&gt; |is a| programming_language\n    python --&gt; |is a| interpreted_language\n    python --&gt; |is a| scripting_language\n\n    programming_language --&gt; |uses| text_files\n    interpreted_language --&gt; |has a| interpreter\n    scripting_language --&gt; |is|interpreted_language\n    scripting_language --&gt; |runs| scripts\n    scripts --&gt; |are| text_files\n    %% scripts --&gt; |can use| command_line_arguments\n\n    python --&gt; |has| python_packages\n    python --&gt; |has| variables\n    %%python --&gt; |has| functions\n    python --&gt; |has| operators\n    %%functions --&gt; |use| variables\n    operators --&gt; |work on| variables\n    %%python_packages --&gt; |allow| graphics\n    python_packages --&gt; |allow to use| user_input\n    %% python_packages --&gt; |allow to do| file_io\n    %% python_packages --&gt; |allow to use| command_line_arguments\n\n    your_hpc_center --&gt; |has| your_hpc_cluster\n    your_hpc_cluster --&gt; |uses| modules\n    your_hpc_cluster --&gt; |have| text_editors\n    your_hpc_cluster --&gt; |allow| x_forwarding\n    your_hpc_cluster --&gt; |has| remote_desktop\n    modules --&gt; |allow the use of| python_packages\n    modules --&gt; |allow the use of| interpreter\n\n    text_editors --&gt; |work on|text_files\n    %%x_forwarding --&gt; |allows|graphics\n    %%remote_desktop --&gt; |allows|graphics\n\n\n    variables ~~~ your_hpc_center</code></pre>"},{"location":"sessions/variables_expressions_and_statements_1/#exercises","title":"Exercises","text":""},{"location":"sessions/variables_expressions_and_statements_1/#exercise-1-working-with-variables","title":"Exercise 1: working with variables","text":"<p>Learning outcomes</p> <ul> <li>get the type of an object</li> <li>create a variable</li> <li>use a variable</li> </ul> <p>Read the following sections of How to Think Like a Computer Scientist: Learning with Python 3:</p> <ul> <li>2.1. Values and data types</li> <li>2.2. Variables</li> <li>2.3. Variable names and keywords</li> </ul> <p>Then in section 2.14, do exercises 1 to and including 4.</p> <p>2.14.1</p> <p>Take the sentence: 'All work and no play makes Jack a dull boy'. Store each word in a separate variable, then print out the sentence on one line using print.</p> Answer <pre><code>a = 'All'\nb = 'work'\nc = 'and'\nd = 'no'\ne = 'play'\nf = 'makes'\ng = 'Jack'\nh = 'a'\ni = 'dull'\nj = 'boy'\nprint(a, b, c, d, e, f, g, h, i, j)    \n</code></pre> <p>2.14.2</p> <p>Add parenthesis to the expression <code>6 * 1 - 2</code> to change its value from 4 to -6.</p> Answer <pre><code>6 * (1 - 2)\n</code></pre> <p>2.14.3</p> <p>Place a comment before a line of code that previously worked, and record what happens when you rerun the program.</p> Answer <p>I use this code as a starting point:</p> <pre><code>a = 'All'\nb = 'work'\nc = 'and'\nd = 'no'\ne = 'play'\nf = 'makes'\ng = 'Jack'\nh = 'a'\ni = 'dull'\nj = 'boy'\nprint(a, b, c, d, e, f, g, h, i, j)    \n</code></pre> <p>Commenting out the first line:</p> <pre><code>    print(a, b, c, d, e, f, g, h, i, j)\n          ^\nNameError: name 'a' is not defined\n</code></pre> <p>Commenting out the last line results in no sentence being printed.</p> <p>2.14.4</p> <p>Start the Python interpreter and enter bruce + 4 at the prompt. This will give you an error:</p> <pre><code>NameError: name 'bruce' is not defined\n</code></pre> <p>Assign a value to <code>bruce</code> so that <code>bruce + 4</code> evaluates to 10.</p> Answer <p>Here is a solution:</p> <pre><code>bruce = 6\nprint(bruce + 4)\n</code></pre>"},{"location":"sessions/variables_expressions_and_statements_2/","title":"Variables, expressions and statements: operators","text":"<p>Learning outcomes</p> <ul> <li>Practice using the documentation of your HPC cluster</li> <li>Practice using the Python book   How to Think Like a Computer Scientist: Learning with Python 3</li> <li>Get the type of an object</li> <li>Create a variable</li> <li>Use a variable</li> <li>Practice converting an equation to Python code</li> <li>Find and use the operator for exponentiation</li> <li>Practice the modulo operator</li> <li>Practice converting a simple text question to Python code</li> </ul> For teachers <p>Teaching goals are:</p> <ul> <li>Learners have worked with variables</li> <li>Learners understand the purpose of variables</li> <li>Learners have obtained the data type of a variable</li> <li>Learners have heard about what a data type is</li> <li>Learners have practiced convert an equation and a text question to Python</li> <li>Learners have read on operators</li> <li>Learners have worked with the modulo operator</li> </ul> <p>Lesson plan:</p> <p>Exercises:</p> <ul> <li>5 mins: prior knowledge</li> <li>5 mins: presentation</li> <li>15 mins: challenge</li> <li>5 mins: feedback</li> </ul> <p>Prior questions:</p> <ul> <li>What is an operator?</li> <li>If I ask you: 'What time is it 10 hours later,   what is the calculation you do in your head?'</li> <li>What is the modulo operator?</li> </ul>"},{"location":"sessions/variables_expressions_and_statements_2/#overview","title":"Overview","text":"<p>In any non-trivial calculation, we want to let our computer remember things, such as the content of a data file, or the parameters/settings we use in our program. Variables allows one to make a computer store ('remember') information. Here we use our first simple variables.</p> <p>Also we practice converting an equation and a mathematical problem to Python code. We will discover the helpful modulo operator.</p> <pre><code>flowchart TD\n    python[[Python]]\n\n    %% Give a white background to all nodes, instead of a transparent one\n    classDef node fill:#fff,color:#000,stroke:#000\n\n    subgraph sub_programming_language[Programming language]\n      interpreted_language[Interpreted language]\n      programming_language[Programming language]\n      scripting_language[Scripting language]\n      interpreter[Interpreter]\n      scripts[Scripts]\n      text_files[Text files]\n    end\n    style sub_programming_language fill:#ccf,color:#000,stroke:#fcc\n\n    subgraph sub_programming_terms[Programming terms]\n      user_input[User input]\n      %% file_io[File I/O]\n      %% command_line_arguments[Command-line arguments]\n      variables[Variables]\n      operators[Operators]\n      %% functions[Functions]\n      python_packages[Python packages]\n      %% graphics[Graphics]\n    end \n    style sub_programming_terms fill:#cfc,color:#000,stroke:#fcc\n\n    subgraph sub_naiss[NAISS]\n      your_hpc_center[Your HPC center]\n      modules[software modules]\n      your_hpc_cluster[Your HPC cluster]\n      text_editors[Text editors]\n      x_forwarding[X-forwarding]\n      remote_desktop[Remote desktop]\n    end\n    style sub_naiss fill:#fcc,color:#000,stroke:#fcc\n\n    python --&gt; |is a| programming_language\n    python --&gt; |is a| interpreted_language\n    python --&gt; |is a| scripting_language\n\n    programming_language --&gt; |uses| text_files\n    interpreted_language --&gt; |has a| interpreter\n    scripting_language --&gt; |is|interpreted_language\n    scripting_language --&gt; |runs| scripts\n    scripts --&gt; |are| text_files\n    %% scripts --&gt; |can use| command_line_arguments\n\n    python --&gt; |has| python_packages\n    python --&gt; |has| variables\n    %%python --&gt; |has| functions\n    python --&gt; |has| operators\n    %%functions --&gt; |use| variables\n    operators --&gt; |work on| variables\n    %%python_packages --&gt; |allow| graphics\n    python_packages --&gt; |allow to use| user_input\n    %% python_packages --&gt; |allow to do| file_io\n    %% python_packages --&gt; |allow to use| command_line_arguments\n\n    your_hpc_center --&gt; |has| your_hpc_cluster\n    your_hpc_cluster --&gt; |have| modules\n    your_hpc_cluster --&gt; |have| text_editors\n    your_hpc_cluster --&gt; |allow| x_forwarding\n    your_hpc_cluster --&gt; |has| remote_desktop\n    modules --&gt; |allow the use of| python_packages\n    modules --&gt; |allow the use of| interpreter\n\n    text_editors --&gt; |work on|text_files\n    %%x_forwarding --&gt; |allows|graphics\n    %%remote_desktop --&gt; |allows|graphics\n\n\n    variables ~~~ your_hpc_center</code></pre>"},{"location":"sessions/variables_expressions_and_statements_2/#exercises","title":"Exercises","text":""},{"location":"sessions/variables_expressions_and_statements_2/#exercise-1-an-equation-with-exponentiation","title":"Exercise 1: an equation with exponentiation","text":"<p>Learning outcomes</p> <ul> <li>practice converting an equation to Python code</li> <li>find and use the operator for exponentiation</li> </ul> <p>Read the following sections of How to Think Like a Computer Scientist: Learning with Python 3:</p> <ul> <li>2.6. Operators and operands</li> </ul> <p>Then in section 2.14, do exercise 5 except for asking for input: use a hardcoded value as input, for example:</p> <pre><code>t = 3.14\n</code></pre> <p>2.14.5</p> <p>The formula for computing the final amount if one is earning compound interest is given on Wikipedia as</p> <p></p> <p>Write a Python program that assigns the principal amount of $<code>10000</code> to variable <code>P</code>, assign to <code>n</code> the value <code>12</code>, and assign to <code>r</code> the interest rate of 8%. ~~Then have the program prompt the user for the number of years <code>t</code> that the money will be compounded for~~ [Edit: set the value of <code>t</code> to any positive value]. Calculate and print the final amount after <code>t</code> years.</p> Answer <p>Here is a possible implementation:</p> <pre><code>p = 10000 # principal amount, in dollar\nr = 1.08 # yearly anual interest rate\nn = 12 # monthly compounding\nt = 3.14 # number of years\na = p * ((1 + (r/n)) ** (n * t))\nprint(a)\n</code></pre> <p>Note that <code>p</code> (and not <code>P</code>) was used, as this follows the PEP 8 Python coding standard.</p> <p>Additionally, to make sure the equation is calculated correctly, plenty of parentheses were used.</p>"},{"location":"sessions/variables_expressions_and_statements_2/#exercise-2-the-modulo-operator","title":"Exercise 2: the modulo operator","text":"<p>Learning outcomes</p> <ul> <li>practice the modulo operator</li> <li>practice converting a simple text question to Python code</li> </ul> <p>Read the following sections of How to Think Like a Computer Scientist: Learning with Python 3:</p> <ul> <li>2.8. Order of operations</li> <li>2.12. The modulus operator</li> </ul> <p>Then in section 2.14, do exercises 6 and 7.</p> <p>2.14.6</p> <p>Evaluate the following numerical expressions in your head, then use the Python interpreter to check your results:</p> <pre><code>&gt;&gt;&gt; 5 % 2\n&gt;&gt;&gt; 9 % 5\n&gt;&gt;&gt; 15 % 12\n&gt;&gt;&gt; 12 % 15\n&gt;&gt;&gt; 6 % 6\n&gt;&gt;&gt; 0 % 7\n&gt;&gt;&gt; 7 % 0\n</code></pre> <p>What happened with the last example? Why? If you were able to correctly anticipate the computer\u2019s response in all but the last one, it is time to move on. If not, take time now to make up examples of your own. Explore the modulus operator until you are confident you understand how it works.</p> Answer <pre><code>&gt;&gt;&gt; 5 % 2\n1\n&gt;&gt;&gt; 9 % 5\n4\n&gt;&gt;&gt; 15 % 12\n3\n&gt;&gt;&gt; 12 % 15\n12\n&gt;&gt;&gt; 6 % 6\n0\n&gt;&gt;&gt; 0 % 7\n0\n&gt;&gt;&gt; 7 % 0\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nZeroDivisionError: integer modulo by zero\n&gt;&gt;&gt; \n</code></pre> <p>The last error is the result from a division by zero: <code>7 % 0</code> means: 'calculate the remainder after dividing seven by zero'. One cannot divide a number by zero.</p> <p>2.14.7</p> <p>You look at the clock and it is exactly 2pm. You set an alarm to go off in 51 hours. At what time does the alarm go off? (Hint: you could count on your fingers, but this is not what we\u2019re after. If you are tempted to count on your fingers, change the 51 to 5100.)</p> Answer <p>Here is a possible implementation:</p> <pre><code>t_now = 14 # 2 pm\nt_future = (t_now + 51) % 24\nprint(t_future)\n</code></pre> <p>The result is <code>17</code>, i.e. 5 pm.</p>"},{"location":"sessions/variables_expressions_and_statements_3/","title":"Variables, expressions and statements: user input","text":"<p>Learning outcomes</p> <ul> <li>Practice using the documentation of your HPC cluster</li> <li>Practice using the Python book   How to Think Like a Computer Scientist: Learning with Python 3</li> <li>Get the type of an object</li> <li>Create a variable</li> <li>Use a variable</li> <li>Practice converting an equation to Python code</li> <li>Find and use the operator for exponentiation</li> <li>Practice the modulo operator</li> <li>Practice converting a simple text question to Python code</li> <li>Learn how to ask a user for input</li> <li>Use input in a calculation</li> </ul> For teachers <p>Teaching goals are:</p> <ul> <li>Learners have worked with variables</li> <li>Learners understand the purpose of variables</li> <li>Learners have obtained the data type of a variable</li> <li>Learners have heard about what a data type is</li> <li>Learners have practiced convert an equation and a text question to Python</li> <li>Learners have read on operators</li> <li>Learners have worked with the modulo operator</li> <li>Learners have written code that asked for user input</li> </ul> <p>Lesson plan:</p> <ul> <li>5 mins: prior knowledge</li> <li>5 mins: presentation</li> <li>15 mins: challenge</li> <li>5 mins: feedback</li> </ul> <p>Prior questions:</p> <ul> <li>What do we mean with user input?</li> <li>In which ways can we get user input?</li> <li>Why would you want to use user input in your program?</li> </ul>"},{"location":"sessions/variables_expressions_and_statements_3/#overview","title":"Overview","text":"<p>In any non-trivial calculation, we want to let our computer remember things, such as the content of a data file, or the parameters/settings we use in our program. Variables allows one to make a computer store ('remember') information. Here we use our first simple variables.</p> <p>Also we practice converting an equation and a mathematical problem to Python code. We will discover the helpful modulo operator.</p> <pre><code>flowchart TD\n    python[[Python]]\n\n    %% Give a white background to all nodes, instead of a transparent one\n    classDef node fill:#fff,color:#000,stroke:#000\n\n    subgraph sub_programming_language[Programming language]\n      interpreted_language[Interpreted language]\n      programming_language[Programming language]\n      scripting_language[Scripting language]\n      interpreter[Interpreter]\n      scripts[Scripts]\n      text_files[Text files]\n    end\n    style sub_programming_language fill:#ccf,color:#000,stroke:#fcc\n\n    subgraph sub_programming_terms[Programming terms]\n      user_input[User input]\n      %% file_io[File I/O]\n      %% command_line_arguments[Command-line arguments]\n      variables[Variables]\n      operators[Operators]\n      %% functions[Functions]\n      python_packages[Python packages]\n      %% graphics[Graphics]\n    end \n    style sub_programming_terms fill:#cfc,color:#000,stroke:#fcc\n\n    subgraph sub_naiss[NAISS]\n      your_hpc_center[Your HPC center]\n      modules[software modules]\n      your_hpc_cluster[Your HPC cluster]\n      text_editors[Text editors]\n      x_forwarding[X-forwarding]\n      remote_desktop[Remote desktop]\n    end\n    style sub_naiss fill:#fcc,color:#000,stroke:#fcc\n\n    python --&gt; |is a| programming_language\n    python --&gt; |is a| interpreted_language\n    python --&gt; |is a| scripting_language\n\n    programming_language --&gt; |uses| text_files\n    interpreted_language --&gt; |has a| interpreter\n    scripting_language --&gt; |is|interpreted_language\n    scripting_language --&gt; |runs| scripts\n    scripts --&gt; |are| text_files\n    %% scripts --&gt; |can use| command_line_arguments\n\n    python --&gt; |has| python_packages\n    python --&gt; |has| variables\n    %%python --&gt; |has| functions\n    python --&gt; |has| operators\n    %%functions --&gt; |use| variables\n    operators --&gt; |work on| variables\n    %%python_packages --&gt; |allow| graphics\n    python_packages --&gt; |allow to use| user_input\n    %% python_packages --&gt; |allow to do| file_io\n    %% python_packages --&gt; |allow to use| command_line_arguments\n\n    your_hpc_center --&gt; |has| your_hpc_cluster\n    your_hpc_cluster --&gt; |have| modules\n    your_hpc_cluster --&gt; |have| text_editors\n    your_hpc_cluster --&gt; |allow| x_forwarding\n    your_hpc_cluster --&gt; |has| remote_desktop\n    modules --&gt; |allow the use of| python_packages\n    modules --&gt; |allow the use of| interpreter\n\n    text_editors --&gt; |work on|text_files\n    %%x_forwarding --&gt; |allows|graphics\n    %%remote_desktop --&gt; |allows|graphics\n\n\n    variables ~~~ your_hpc_center</code></pre>"},{"location":"sessions/variables_expressions_and_statements_3/#exercises","title":"Exercises","text":""},{"location":"sessions/variables_expressions_and_statements_3/#exercise-1-input","title":"Exercise 1: input","text":"<p>Learning outcomes</p> <ul> <li>learn how to ask a user for input</li> <li>use input in a calculation</li> </ul> <p>Read the following section of How to Think Like a Computer Scientist: Learning with Python 3:</p> <ul> <li><code>2.10. Input</code></li> </ul> <p>Then in section 2.14, do exercise 8.</p> <p>2.14.8</p> <p>Write a Python program to solve the general version of the above problem. Ask the user for the time now (in hours), and ask for the number of hours to wait. Your program should output what the time will be on the clock when the alarm goes off.</p> Answer <p>Here is a possible implementation:</p> <pre><code>t_now = int(input(\"Enter the current hour\"))\nn_hours = int(input(\"Enter the number of hours\"))\nt_future = (t_now + n_hours) % 24\nprint(\"Time after that number of hours:\")\nprint(t_future)\n</code></pre>"},{"location":"sessions/working_with_python_scripts/","title":"Working with Python scripts","text":"<p>Learning outcomes</p> <ul> <li>Practice using the documentation of your HPC cluster</li> <li>To be able to create a Python script</li> <li>To be able to run a Python script</li> </ul> For teachers <p>Teaching goals are:</p> <ul> <li>Learners have practiced using the documentation of their HPC cluster</li> <li>Learners have created a Python script</li> <li>Learners have run a Python script</li> </ul> <p>Other goals are:</p> <ul> <li>Verify that learners indeed have learned how to create a file</li> <li>Verify that learners indeed have learned how to use a text editor</li> </ul> <p>Lesson plan:</p> <ul> <li>5 mins: prior knowledge</li> <li>5 mins: presentation</li> <li>15 mins: challenge</li> <li>5 mins: feedback</li> </ul> <p>Prior questions:</p> <ul> <li>Why would you want to use a script?</li> <li>In which languages can one write a script?</li> <li>How does one run a script?</li> </ul>"},{"location":"sessions/working_with_python_scripts/#why","title":"Why?","text":"<p>You have multiple lines of code you want a computer to run. Instead of copy-pasting these lines individually to the interpreter, one can use a script.</p> <p>To run code, we use text files that are run as if each line was typed in into the Python interpreter. Such text files that run (interpreted) code are called 'scripts'.</p> <p>In this session, we practice to create and run some simple Python scripts, now -unlike the previous chapter- without new theory.</p> <pre><code>flowchart TD\n    python[[Python]]\n\n    %% Give a white background to all nodes, instead of a transparent one\n    classDef node fill:#fff,color:#000,stroke:#000\n\n    subgraph sub_programming_language[Python as a language]\n      interpreted_language[Interpreted language]\n      programming_language[Programming language]\n      scripting_language[Scripting language]\n      interpreter[Interpreter]\n      scripts[Scripts]\n      text_files[Text files]\n    end\n    style sub_programming_language fill:#ccf,color:#000,stroke:#fcc\n\n\n    subgraph sub_naiss[NAISS]\n      your_hpc_center[Your HPC center]\n      your_hpc_cluster[Your HPC cluster]\n      modules[software modules]\n      text_editors[Text editors]\n    end\n    style sub_naiss fill:#fcc,color:#000,stroke:#fcc\n\n    python --&gt; |is a| programming_language\n    python --&gt; |is a| interpreted_language\n    python --&gt; |is a| scripting_language\n\n    programming_language --&gt; |uses| text_files\n    interpreted_language --&gt; |has a| interpreter\n    scripting_language --&gt; |is a|interpreted_language\n    scripting_language --&gt; |runs| scripts\n    scripts --&gt; |are| text_files\n    %% scripts --&gt; |can use| command_line_arguments\n\n    your_hpc_center --&gt; |has| your_hpc_cluster\n    your_hpc_cluster --&gt; |has| modules\n    your_hpc_cluster --&gt; |has| text_editors\n    modules --&gt; |allow the use of| interpreter\n\n    text_editors --&gt; |work on|text_files\n    %%x_forwarding --&gt; |allows|graphics\n    %%remote_desktop --&gt; |allows|graphics\n\n\n    %% variables ~~~ your_hpc_center</code></pre>"},{"location":"sessions/working_with_python_scripts/#exercises","title":"Exercises","text":"<p>This is a partial repeat of the previous session, however with a different focus.</p> <p>The goal is to practice the fundamental skills of creating and running a script.</p>"},{"location":"sessions/working_with_python_scripts/#exercise-1-create-a-python-script","title":"Exercise 1: create a Python script","text":"<p>Go to the documentation of the documentation of your HPC cluster, then answer the questions below. If you cannot find any helpful information, use the UPPMAX documentation about <code>nano</code></p> <ul> <li>On your HPC cluster, create a file called <code>hello_world.py</code>,   using a text editor or Linux commands</li> </ul> Answer <p>Creating a Python script <code>hello_world.py</code> using <code>nano</code>:</p> <pre><code>nano hello_world.py\n</code></pre> <ul> <li>Copy-paste the following content into the script:</li> </ul> <pre><code>print('Hello, world!')\n</code></pre> Answer <p>To paste into a terminal, use <code>CTRL + SHIFT + V</code> (i.e. add <code>SHIFT</code>).</p> <ul> <li>Save the script</li> </ul> Answer <p>In <code>nano</code>, you can do so with <code>CTRL + O</code></p> <ul> <li>Close the text editor</li> </ul> Answer <p>In <code>nano</code>, you can do so with <code>CTRL + X</code></p> <ul> <li>Verify that the script has its contents saved</li> </ul> Answer <p>One way to do so, is to use <code>nano</code> to open the file again:</p> <pre><code>nano hello_world.py\n</code></pre>"},{"location":"sessions/working_with_python_scripts/#exercise-2-run-a-python-script","title":"Exercise 2: run a Python script","text":"<p>Go to the documentation of the documentation of your HPC cluster, then answer the questions below. If you cannot find any helpful information, use the UPPMAX documentation about how to run a Python script.</p> <ul> <li>Run the Python script you just created</li> </ul> Answer <p>You can run this Python script in the shell by:</p> <pre><code>python hello_world.py\n</code></pre>"}]}